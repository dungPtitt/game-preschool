{"version":3,"sources":["file:///D:/game/FrameworkCocos/assets/vd-games/pvp-domino/script/screens/dm_LoadingScreen.ts"],"names":["ProgressBar","Label","AudioClip","assetManager","Prefab","sys","_decorator","Component","log","VDAudioManager","VDLocalDataManager","VDScreenManager","dm_Config","dm_Director","ccclass","property","dm_LoadingScreen","_audios","_items","onLoad","soundDirs","imageDirs","prefabDirs","prefabs","isNative","concat","_setVersion","versionGame","start","loadingProgress","progress","percent","length","isBrowser","_loadAudioWeb","instance","assetBundle","load","err","data","_loadAsset","alert","forEach","soundsPath","sounds","getDirWithPath","sound","path","nativeUrl","utils","getUrlWithUuid","uuid","nativeExt","_initAudio","init","isMuteMusic","getBoolean","ENABLE_MUSIC","isMuteSfx","ENABLE_SFX","isMutingMusic","isMutingEffect","index","totalPercent","_finishedLoading","_isDirectory","loadDir","finished","total","endsWith","assets","as","name","_nativeAsset","url","scheduleOnce","showPopupMessage","onClickBtn2MainGame","play_screen","get","replaceScreenAtIndex","screen","playScreen","message","showPopupFromPrefabName","popup","version","lbVersion","string"],"mappings":"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","sourcesContent":["import { ProgressBar } from 'cc';\nimport { Label } from 'cc';\nimport { AudioClip, assetManager, Asset, Button, utils, sp, Prefab, tween, Vec3 } from 'cc';\nimport { sys } from 'cc';\nimport { _decorator, Component, log } from 'cc';\nimport { VDAudioManager } from '../../../../vd-framework/audio/VDAudioManager';\nimport VDLocalDataManager from '../../../../vd-framework/common/VDLocalDataManager';\nimport VDBasePopup from '../../../../vd-framework/ui/VDBasePopup';\nimport VDBaseScreen from '../../../../vd-framework/ui/VDBaseScreen';\nimport VDScreenManager from '../../../../vd-framework/ui/VDScreenManager';\nimport { dm_Config } from '../common/dm_Config';\nimport { dm_Director } from '../common/dm_Director';\nimport { dm_PlayScreen } from './dm_PlayScreen';\nconst { ccclass, property } = _decorator;\n\n@ccclass('dm_LoadingScreen')\nexport class dm_LoadingScreen extends Component {\n\n    @property(ProgressBar)\n    loadingProgress: ProgressBar = null!;\n\n    @property(Label)\n    lbVersion: Label = null!;\n\n    private _audios: { [key: string]: string } = {};\n    private _items: string[] = [];\n\n    onLoad() {\n        let soundDirs = [\n            'res/sounds/bgm/',\n            'res/sounds/sfx/',\n        ];\n\n        let imageDirs = [\n            'res/fonts/',\n            'res/images/bgr/',\n        ];\n\n        let prefabDirs = [\n            'res/anims/prefabs/',\n            'res/prefabs/popup/',\n        ];\n\n        let prefabs = [\n            'res/prefabs/transition/transition_cloud',\n            'res/prefabs/screen/play_screen',\n            'res/prefabs/screen/play_screen_2',\n            'res/prefabs/screen/play_screen_3',\n        ];\n\n        if (sys.isNative) this._items = this._items.concat(soundDirs);\n\n        this._items = this._items\n            // .concat(soundDirs)\n            .concat(imageDirs)\n            .concat(prefabDirs)\n            .concat(prefabs);\n\n        this._setVersion(dm_Config.versionGame);\n    }\n\n    start() {\n\n        this.loadingProgress.progress = 0;\n\n        let percent = 1.0 / (this._items.length + 1);\n        sys.isBrowser && this._loadAudioWeb();\n        VDScreenManager.instance.assetBundle.load('res/prefabs/popup/popup_notify',\n            (err, data) => {\n                if (!err) {\n                    this._loadAsset(0, percent);\n                }\n                else {\n                    log(\"load error  \" + err + \" _loadAsset\");\n                    if (sys.isBrowser) {\n                        alert(\"Không có kết nối, vui lòng thử lại\");\n                    }\n                }\n            });\n    }\n\n    private _loadAudioWeb() {\n        let soundDirs = [\n            'res/sounds/bgm/',\n            'res/sounds/sfx/',\n        ];\n        soundDirs.forEach(soundsPath => {\n            const sounds = VDScreenManager.instance.assetBundle.getDirWithPath(soundsPath, AudioClip);\n            sounds.forEach(sound => {\n                if (this._audios[`${sound.path}`]) return;\n                const nativeUrl = assetManager.utils.getUrlWithUuid(sound.uuid, { isNative: true, nativeExt: '.mp3' });\n                // log('sound', sound.path, sound.uuid, nativeUrl);\n                // log('sound', assetManager.utils.getUrlWithUuid(sound.uuid, { isNative: false }))\n                this._audios[`${sound.path}`] = nativeUrl;\n            })\n        });\n\n        this._initAudio();\n    }\n\n    private _initAudio() {\n        VDAudioManager.instance.init(this._audios);\n\n        let isMuteMusic = VDLocalDataManager.getBoolean(VDAudioManager.ENABLE_MUSIC, false);\n        let isMuteSfx = VDLocalDataManager.getBoolean(VDAudioManager.ENABLE_SFX, false);\n\n        VDAudioManager.instance.isMutingMusic = isMuteMusic;\n        VDAudioManager.instance.isMutingEffect = isMuteSfx;\n    }\n\n    private _loadAsset(index: number, totalPercent: number) {\n        if (index >= this._items.length) {\n            this.loadingProgress.progress = 1.0;\n            this._finishedLoading();\n            return;\n        }\n        let path = this._items[index];\n        log(\"_loadAsset  \" + path);\n        if (this._isDirectory(path)) {\n            VDScreenManager.instance.assetBundle.loadDir(path,\n                (finished, total) => {\n                    // log(`items #${index}:  ${finished} / ${total} `);\n                    let progress = index * totalPercent + finished / total * totalPercent;\n                    if (progress > this.loadingProgress.progress) {\n                        this.loadingProgress.progress = progress;\n                    }\n                },\n                (err, data) => {\n                    if (sys.isNative && (path.endsWith('/bgm/') || path.endsWith('/sfx/'))) {\n                        // log(`AudioClip loaded:${JSON.stringify(this._audios)}`);\n                        let assets: Asset[] = data;\n                        for (let as of assets) {\n                            if (as instanceof AudioClip) {\n                                this._audios[`${path}${as.name}`] = `${as._nativeAsset.url}`;\n                            }\n                        }\n\n                        this._initAudio();\n                    }\n\n                    if (!err) {\n                        this.scheduleOnce(() => {\n                            this._loadAsset(index + 1, totalPercent);\n                        }, 0);\n                    } else {\n                        log(\"load error  \" + err + \"    \" + path);\n                        if (sys.isBrowser) {\n                            this.showPopupMessage(\"Đã có lỗi tải tài nguyên, vui lòng thử lại\");\n                        }\n                    }\n                });\n        }\n        else {\n            VDScreenManager.instance.assetBundle.load(path,\n                (finished, total) => {\n                    // log(`${finished} / ${total} `);\n                    this.loadingProgress.progress = index * totalPercent + finished / total * totalPercent;\n                },\n                (err, data) => {\n                    if (!err) {\n                        this.scheduleOnce(() => {\n                            this._loadAsset(index + 1, totalPercent);\n                        }, 0);\n                    }\n                    else {\n                        log(\"load error  \" + err + \"    \" + path);\n                        if (sys.isBrowser) {\n                            this.showPopupMessage(\"Đã có lỗi tải tài nguyên, vui lòng thử lại\");\n                        }\n                    }\n                });\n        }\n    }\n\n    private _finishedLoading() {\n        log(`LoadingScreen: _finishedLoading`);\n    }\n\n    onClickBtn2MainGame() {\n        log(`onClickBtn2MainGame`);\n\n        let play_screen = VDScreenManager.instance.assetBundle.get('res/prefabs/screen/play_screen', Prefab)!;\n        VDScreenManager.instance.replaceScreenAtIndex(play_screen, 0, (screen: VDBaseScreen) => {\n            dm_Director.instance.playScreen = screen as dm_PlayScreen;\n        });\n\n    }\n\n    private showPopupMessage(message: string) {\n        VDScreenManager.instance.showPopupFromPrefabName(\"res/prefabs/popup/popup_notify\", (popup: VDBasePopup) => {\n            // let popupDisplay = popup as DomiPopupNotify;\n            // popupDisplay.setupPopup(message, [\n            //     () => {\n            //         VDScreenManager.instance.hidePopup(true);\n            //         let percent = 1.0 / (this._items.length + 1);\n            //         this._loadAsset(0, percent);\n            //     },\n            //     () => {\n            //         VDScreenManager.instance.hidePopup(true);\n            //     }\n            // ]);\n        }, true, true, false);\n    }\n\n    private _setVersion(version: string) {\n        this.lbVersion && (this.lbVersion.string = 'v' + version);\n    }\n\n    private _isDirectory(path: string | null): boolean {\n        return path != null && typeof path == 'string' && path.length > 0 && path[path.length - 1] == '/';\n    }\n}\n\n"]}