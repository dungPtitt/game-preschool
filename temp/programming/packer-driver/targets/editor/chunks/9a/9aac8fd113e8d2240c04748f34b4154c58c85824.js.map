{"version":3,"sources":["file:///D:/game/FrameworkCocos/assets/vd-games/preschool-exam/script/screens/science/level2_science.ts"],"names":["_decorator","Component","Node","Color","log","Prefab","tween","v3","Label","Graphics","v2","resources","instantiate","VDScreenManager","level_progress_bar","LocalDataManager","ccclass","property","level2_science","type","assetBundle","draw","listGraphics","graphics","canPlay","levelNumber","pSrc","pTarget","pStart","pDrawStart","pTemp","currentStart","firstOne","start","startPlay","lev","level","getComponent","string","Number","call","initGraphic","startDraw","on","EventType","TOUCH_START","onTouchStart","bind","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","graphicsPrefab","instance","get","gNode","g","strokeColor","BLACK","fillColor","area","addChild","lineWidth","push","length","event","pLeft","left","getWorldPosition","x","y","pRight","right","p","getUILocation","out","inverseTransformPoint","moveTo","lineTo","stroke","dx","Math","abs","dy","handleDrawAgain","handleDrawContinue","checkAnswer","pop","clear","out1","onClickInstruction","onClickBack","popToRootScreen","processCorrect","RED","ob","getObject","checkDone","science","levelBarUI","handleProgress","setObject","fireWork","active","to","scale","showPopupNext","processWrong","update","deltaTime","showPopupFromPrefabName","popup","popupWin","finishedCallback","level2_screen","String","pushScreen","screen"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAcC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,G,OAAAA,G;AAAKC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,E,OAAAA,E;AAAIC,MAAAA,K,OAAAA,K;AAA4CC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,E,OAAAA,E;AAAwBC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,W,OAAAA,W;;AAE/JC,MAAAA,e;;AAGEC,MAAAA,kB,iBAAAA,kB;;AACFC,MAAAA,gB;;;;;;;;;OAKD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBjB,U;;gCAGjBkB,c,WADZF,OAAO,CAAC,gBAAD,C,UAOHC,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEjB;AAAP,OAAD,C,UAERe,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEjB;AAAP,OAAD,C,UAERe,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEjB;AAAP,OAAD,C,UAERe,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEjB;AAAP,OAAD,C,UAERe,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEjB;AAAP,OAAD,C,UAERe,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEjB;AAAP,OAAD,C,UAGRe,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEjB;AAAP,OAAD,C,UAERe,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEjB;AAAP,OAAD,C,WAGRe,QAAQ;AAAA;AAAA,mD,WAERA,QAAQ,CAACf,IAAD,C,2BA3Bb,MACagB,cADb,SACoCjB,SADpC,CAC8C;AAAA;AAAA;AAAA,eAElCmB,WAFkC,GAECT,SAFD;AAAA,eAK1CU,IAL0C,GAK7B,IAL6B;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eA4B1CC,YA5B0C,GA4Bf,EA5Be;AAAA,eA8BlCC,QA9BkC,GA8BvB,IA9BuB;AAAA,eA+BlCC,OA/BkC,GA+BxB,IA/BwB;AAAA,eAgCnCC,WAhCmC,GAgCrB,CAhCqB;AAAA,eAiClCC,IAjCkC;AAAA,eAkClCC,OAlCkC;AAAA,eAmClCC,MAnCkC;AAAA,eAoClCC,UApCkC;AAAA,eAqClCC,KArCkC;AAAA,eAsClCC,YAtCkC;AAAA,eAuClCC,QAvCkC,GAuCvB,IAvCuB;AAAA;;AAyC1C;AACA;AAEAC,QAAAA,KAAK,GAAG;AACJ,eAAKC,SAAL;AACH;;AACDA,QAAAA,SAAS,GAAG;AACR,cAAG,KAAKV,OAAR,EAAgB;AACZ,gBAAIW,GAAG,GAAG,KAAKC,KAAL,CAAWC,YAAX,CAAwB7B,KAAxB,EAA+B8B,MAAzC;AACA,iBAAKb,WAAL,GAAmBc,MAAM,CAACJ,GAAD,CAAzB;AACA7B,YAAAA,KAAK,CAAC,IAAD,CAAL,CACCkC,IADD,CACM,KAAKC,WADX,EAECD,IAFD,CAEM,KAAKE,SAFX,EAGCT,KAHD;AAIH;AACJ;;AACDS,QAAAA,SAAS,GAAE;AACP,eAAKrB,IAAL,CAAUsB,EAAV,CAAazC,IAAI,CAAC0C,SAAL,CAAeC,WAA5B,EAAyC,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAAzC;AACA,eAAK1B,IAAL,CAAUsB,EAAV,CAAazC,IAAI,CAAC0C,SAAL,CAAeI,UAA5B,EAAwC,KAAKC,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAxC;AACA,eAAK1B,IAAL,CAAUsB,EAAV,CAAazC,IAAI,CAAC0C,SAAL,CAAeM,SAA5B,EAAuC,KAAKC,UAAL,CAAgBJ,IAAhB,CAAqB,IAArB,CAAvC;AACH;;AACDN,QAAAA,WAAW,GAAE;AACT,cAAIW,cAAc,GAAG;AAAA;AAAA,kDAAgBC,QAAhB,CAAyBjC,WAAzB,CAAqCkC,GAArC,CAAyC,yBAAzC,EAAoEjD,MAApE,CAArB;AACA,cAAIkD,KAAK,GAAG3C,WAAW,CAACwC,cAAD,CAAvB;AACA,eAAK/B,IAAL,GAAYkC,KAAZ;AACA,cAAIC,CAAC,GAAG5C,WAAW,CAACwC,cAAD,CAAX,CAA4Bf,YAA5B,CAAyC5B,QAAzC,CAAR;AACA+C,UAAAA,CAAC,CAACC,WAAF,GAAgBtD,KAAK,CAACuD,KAAtB;AACAF,UAAAA,CAAC,CAACG,SAAF,GAAcxD,KAAK,CAACuD,KAApB;AACA,eAAKE,IAAL,CAAUC,QAAV,CAAmBN,KAAnB;AACAC,UAAAA,CAAC,CAACM,SAAF,GAAc,EAAd;AACA,eAAKvC,QAAL,GAAgBiC,CAAhB;AACA,eAAKlC,YAAL,CAAkByC,IAAlB,CAAuB,KAAKxC,QAA5B;AACA,eAAKD,YAAL,CAAkB,KAAKA,YAAL,CAAkB0C,MAAlB,GAAyB,CAA3C,EAA8CF,SAA9C,GAA0D,EAA1D;AACH;;AACDhB,QAAAA,YAAY,CAACmB,KAAD,EAAmB;AAC3B,cAAG,KAAKjC,QAAR,EAAiB;AACb,gBAAIkC,KAAK,GAAG,KAAKC,IAAL,CAAUC,gBAAV,EAAZ;AACA,iBAAKxC,MAAL,GAAclB,EAAE,CAACwD,KAAK,CAACG,CAAP,EAAUH,KAAK,CAACI,CAAhB,CAAhB;AACA,iBAAK5C,IAAL,GAAYhB,EAAE,CAACwD,KAAK,CAACG,CAAP,EAAUH,KAAK,CAACI,CAAhB,CAAd;AAEA,gBAAIC,MAAM,GAAG,KAAKC,KAAL,CAAWJ,gBAAX,EAAb;AACA,iBAAKzC,OAAL,GAAejB,EAAE,CAAC6D,MAAM,CAACF,CAAR,EAAWE,MAAM,CAACD,CAAlB,CAAjB;AACA,iBAAKtC,QAAL,GAAgB,KAAhB;AACH,WARD,MAQM;AACF,iBAAKJ,MAAL,GAAclB,EAAE,CAAC,KAAKoB,KAAL,CAAWuC,CAAZ,EAAe,KAAKvC,KAAL,CAAWwC,CAA1B,CAAhB;AACH,WAX0B,CAY3B;;;AACA,cAAIG,CAAC,GAAGR,KAAK,CAACS,aAAN,EAAR;AACA,eAAK7C,UAAL,GAAkBnB,EAAE,CAAC+D,CAAC,CAACJ,CAAH,EAAMI,CAAC,CAACH,CAAR,CAApB,CAd2B,CAe3B;;AACA,cAAIK,GAAG,GAAGpE,EAAE,EAAZ;AACA,eAAKqD,IAAL,CAAUgB,qBAAV,CAAgCD,GAAhC,EAAqCpE,EAAE,CAACkE,CAAC,CAACJ,CAAH,EAAMI,CAAC,CAACH,CAAR,EAAW,CAAX,CAAvC;AACA,cAAId,CAAC,GAAG,KAAKlC,YAAL,CAAkB,KAAKA,YAAL,CAAkB0C,MAAlB,GAAyB,CAA3C,CAAR;AACAR,UAAAA,CAAC,CAACqB,MAAF,CAASF,GAAG,CAACN,CAAb,EAAgBM,GAAG,CAACL,CAApB;AACH;;AACDrB,QAAAA,WAAW,CAACgB,KAAD,EAAmB;AAC1B,cAAIQ,CAAC,GAAGR,KAAK,CAACS,aAAN,EAAR;AACA,cAAIC,GAAG,GAAGpE,EAAE,EAAZ;AACA,eAAKqD,IAAL,CAAUgB,qBAAV,CAAgCD,GAAhC,EAAqCpE,EAAE,CAACkE,CAAC,CAACJ,CAAH,EAAMI,CAAC,CAACH,CAAR,EAAW,CAAX,CAAvC;AACA,cAAId,CAAC,GAAG,KAAKlC,YAAL,CAAkB,KAAKA,YAAL,CAAkB0C,MAAlB,GAAyB,CAA3C,CAAR;AACAR,UAAAA,CAAC,CAACsB,MAAF,CAASH,GAAG,CAACN,CAAb,EAAgBM,GAAG,CAACL,CAApB;AACAd,UAAAA,CAAC,CAACuB,MAAF;AACH;;AACD5B,QAAAA,UAAU,CAACc,KAAD,EAAmB;AACzB,cAAIQ,CAAC,GAAGR,KAAK,CAACS,aAAN,EAAR;AACAtE,UAAAA,GAAG,CAAC,WAAD,EAAc,KAAKwB,MAAnB,EAA2B,KAAKC,UAAhC,CAAH;AACA,cAAImD,EAAE,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKtD,MAAL,CAAYyC,CAAZ,GAAc,KAAKxC,UAAL,CAAgBwC,CAAvC,CAAT;AACA,cAAIc,EAAE,GAAGF,IAAI,CAACC,GAAL,CAAS,KAAKtD,MAAL,CAAY0C,CAAZ,GAAc,KAAKzC,UAAL,CAAgByC,CAAvC,CAAT;;AACA,cAAGU,EAAE,GAAC,EAAH,IAASG,EAAE,GAAC,EAAf,EAAkB;AACd/E,YAAAA,GAAG,CAAC,aAAD,CAAH;AACA,iBAAK0B,KAAL,GAAapB,EAAE,CAAC,KAAKkB,MAAL,CAAYyC,CAAb,EAAgB,KAAKzC,MAAL,CAAY0C,CAA5B,CAAf;AACA,iBAAKc,eAAL;AAEH,WALD,MAKM;AACFhF,YAAAA,GAAG,CAAC,gBAAD,CAAH;AACA,iBAAK0B,KAAL,GAAapB,EAAE,CAAC+D,CAAC,CAACJ,CAAH,EAAMI,CAAC,CAACH,CAAR,CAAf;AACA,iBAAKe,kBAAL,GAHE,CAIF;;AACA,iBAAKC,WAAL;AACH;AAEJ;;AACDF,QAAAA,eAAe,GAAE;AACb,cAAI5B,CAAC,GAAG,KAAKlC,YAAL,CAAkBiE,GAAlB,EAAR;;AACA,cAAG/B,CAAC,KAAK,KAAKlC,YAAL,CAAkBiE,GAAlB,EAAT,EAAiC;AAC7BnF,YAAAA,GAAG,CAAC,WAAD,CAAH;AACH;;AACDA,UAAAA,GAAG,CAAC,qBAAD,EAAwB,KAAKkB,YAA7B,CAAH;AACAkC,UAAAA,CAAC,CAACgC,KAAF;AACA,eAAK/C,WAAL;AACH;;AACD4C,QAAAA,kBAAkB,GAAE;AAChB,eAAK5C,WAAL;AACA,cAAIe,CAAC,GAAG,KAAKlC,YAAL,CAAkB,KAAKA,YAAL,CAAkB0C,MAAlB,GAAyB,CAA3C,CAAR;AACA5D,UAAAA,GAAG,CAAC,qBAAD,EAAwB,KAAKkB,YAA7B,CAAH,CAHgB,CAKhB;;AACA,cAAImE,IAAI,GAAGlF,EAAE,EAAb;AACA,eAAKqD,IAAL,CAAUgB,qBAAV,CAAgCa,IAAhC,EAAsClF,EAAE,CAAC,KAAKsB,UAAL,CAAgBwC,CAAjB,EAAoB,KAAKxC,UAAL,CAAgByC,CAApC,EAAuC,CAAvC,CAAxC,EAPgB,CAQhB;;AACAd,UAAAA,CAAC,CAACqB,MAAF,CAASY,IAAI,CAACpB,CAAd,EAAiBoB,IAAI,CAACnB,CAAtB;AACA,eAAKV,IAAL,CAAUgB,qBAAV,CAAgCa,IAAhC,EAAsClF,EAAE,CAAC,KAAKqB,MAAL,CAAYyC,CAAb,EAAgB,KAAKzC,MAAL,CAAY0C,CAA5B,EAA+B,CAA/B,CAAxC,EAVgB,CAWhB;;AACAd,UAAAA,CAAC,CAACsB,MAAF,CAASW,IAAI,CAACpB,CAAd,EAAiBoB,IAAI,CAACnB,CAAtB;AACAd,UAAAA,CAAC,CAACuB,MAAF;AACH;;AACDW,QAAAA,kBAAkB,GAAG,CACjB;AACH;;AACDC,QAAAA,WAAW,GAAG;AACV;AAAA;AAAA,kDAAgBtC,QAAhB,CAAyBuC,eAAzB;AACH;;AACDN,QAAAA,WAAW,GAAE;AACT,cAAG,KAAK9D,OAAR,EAAgB;AACZ,gBAAIwD,EAAE,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKvD,OAAL,CAAa0C,CAAb,GAAiB,KAAKvC,KAAL,CAAWuC,CAArC,CAAT;AACA,gBAAIc,EAAE,GAAGF,IAAI,CAACC,GAAL,CAAS,KAAKvD,OAAL,CAAa2C,CAAb,GAAiB,KAAKxC,KAAL,CAAWwC,CAArC,CAAT;;AACA,gBAAGU,EAAE,GAAC,EAAH,IAASG,EAAE,GAAC,EAAf,EAAmB;AACf,mBAAKU,cAAL,GADe,CAEf;;AACA,kBAAIrC,CAAC,GAAG,KAAKjC,QAAb;AACAiC,cAAAA,CAAC,CAACgC,KAAF;AACAhC,cAAAA,CAAC,CAACC,WAAF,GAAgBtD,KAAK,CAAC2F,GAAtB;AACA,kBAAIL,IAAI,GAAGlF,EAAE,EAAb;AACA,mBAAKqD,IAAL,CAAUgB,qBAAV,CAAgCa,IAAhC,EAAsClF,EAAE,CAAC,KAAKmB,IAAL,CAAU2C,CAAX,EAAc,KAAK3C,IAAL,CAAU4C,CAAxB,EAA2B,CAA3B,CAAxC;AACAd,cAAAA,CAAC,CAACqB,MAAF,CAASY,IAAI,CAACpB,CAAd,EAAiBoB,IAAI,CAACnB,CAAtB;AAEA,mBAAKV,IAAL,CAAUgB,qBAAV,CAAgCa,IAAhC,EAAsClF,EAAE,CAAC,KAAKoB,OAAL,CAAa0C,CAAd,EAAiB,KAAK1C,OAAL,CAAa2C,CAA9B,EAAiC,CAAjC,CAAxC;AACAd,cAAAA,CAAC,CAACsB,MAAF,CAASW,IAAI,CAACpB,CAAd,EAAiBoB,IAAI,CAACnB,CAAtB;AACAd,cAAAA,CAAC,CAACuB,MAAF;AACH;AACJ;AACJ;;AACDc,QAAAA,cAAc,GAAE;AACZ,cAAIE,EAAE,GAAG;AAAA;AAAA,oDAAiBC,SAAjB,CAA2B,OAA3B,EAAoC,EAApC,CAAT;AACA,cAAIC,SAAS,GAAGF,EAAE,CAACG,OAAH,CAAW,KAAKzE,WAAL,GAAiB,CAA5B,CAAhB;;AACA,cAAG,KAAK0E,UAAR,EAAmB;AACf,gBAAG,CAACF,SAAJ,EAAe;AACX,mBAAKE,UAAL,CAAgBC,cAAhB;AACH;;AACDL,YAAAA,EAAE,CAACG,OAAH,CAAW,KAAKzE,WAAL,GAAiB,CAA5B,IAAiC,IAAjC;AACA;AAAA;AAAA,sDAAiB4E,SAAjB,CAA2B,OAA3B,EAAoCN,EAApC;AACH;;AAED,eAAKvE,OAAL,GAAe,KAAf;AACA,eAAK8E,QAAL,CAAcC,MAAd,GAAuB,IAAvB;AACAjG,UAAAA,KAAK,CAAC,KAAKgG,QAAN,CAAL,CACCE,EADD,CACI,CADJ,EACO;AAACC,YAAAA,KAAK,EAAElG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAAV,WADP,EAECiC,IAFD,CAEM,MAAI;AACN,iBAAKkE,aAAL;AACH,WAJD,EAKClE,IALD,CAKM,MAAI;AACN,iBAAK8D,QAAL,CAAcC,MAAd,GAAuB,KAAvB;AACH,WAPD,EAQCtE,KARD,GAbY,CAsBZ;AACA;AACA;AACH;;AACD0E,QAAAA,YAAY,GAAE,CACV;AACA;AACA;AACA;AACA;AACH;;AACDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB,CAhNyC,CAiN1C;;;AACAH,QAAAA,aAAa,GAAG;AACZtG,UAAAA,GAAG,CAAC,OAAD,EAAU,KAAKqB,WAAf,CAAH;AACA;AAAA;AAAA,kDAAgB4B,QAAhB,CAAyByD,uBAAzB,CAAiD,8BAAjD,EAAkFC,KAAD,IAAwB;AACrG,gBAAIC,QAAQ,GAAGD,KAAf,CADqG,CAErG;;AACAC,YAAAA,QAAQ,CAACC,gBAAT,GAA4B,MAAM;AAC9B,kBAAIC,aAAa,GAAG;AAAA;AAAA,sDAAgB7D,QAAhB,CAAyBjC,WAAzB,CAAqCkC,GAArC,CAAyC,qCAAmC6D,MAAM,CAAC,KAAK1F,WAAL,GAAiB,CAAlB,CAAlF,EAAwGpB,MAAxG,CAApB;AACA;AAAA;AAAA,sDAAgBgD,QAAhB,CAAyB+D,UAAzB,CAAoCF,aAApC,EAAoDG,MAAD,IAA0B,CAAG,CAAhF,EAAkF,IAAlF;AACAjH,cAAAA,GAAG,CAAC,wBAAD,CAAH;AACH,aAJD;AAKH,WARD,EAQG,KARH,EAQU,IARV,EAQgB,IARhB;AASH;;AA7NyC,O;;;;;iBAO7B,I;;;;;;;iBAES,E;;;;;;;iBAEC,E;;;;;;;iBAET,I;;;;;;;iBAEF,I;;;;;;;iBAEK,I;;;;;;;iBAGJ,I;;;;;;;iBAEC,I;;;;;;;iBAGmB,I;;;;;;;iBAEnB,I","sourcesContent":["import { _decorator, Component, Node, Sprite, Color, log, Prefab, tween, v3, Label, Vec3, Button, UIOpacity, EventTouch, Graphics, v2, Vec2, AssetManager, resources, instantiate } from 'cc';\r\nimport VDBaseScreen from '../../../../../vd-framework/ui/VDBaseScreen';\r\nimport VDScreenManager from '../../../../../vd-framework/ui/VDScreenManager';\r\nimport { ScaleFactor, scaleTo, scaleTo2, TimeFactor } from '../../transiton/Transformation';\r\n\r\nimport { level_progress_bar } from '../../transiton/level_progress_bar';\r\nimport LocalDataManager from '../../common/LocalDataManager';\r\nimport { handleFirework } from '../../common/handleFirework';\r\nimport { scaleAndHide } from '../../transiton/Transformation';\r\nimport VDBasePopup from '../../../../../vd-framework/ui/VDBasePopup';\r\nimport { popup_next } from '../../popups/popup_next';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('level2_science')\r\nexport class level2_science extends Component {\r\n\r\n    private assetBundle: AssetManager.Bundle = resources;\r\n\r\n    // @property({type: Node})\r\n    draw: Node = null;\r\n    @property({type: Node})\r\n    area: Node = null;\r\n    @property({type: Node})\r\n    listAnswers: Node[] = [];\r\n    @property({type: Node})\r\n    listQuestion: Node[] = [];\r\n    @property({type: Node})\r\n    smile: Node = null;\r\n    @property({type: Node})\r\n    cry: Node = null;\r\n    @property({type: Node})\r\n    fireWork: Node = null;\r\n\r\n    @property({type: Node})\r\n    left: Node = null;\r\n    @property({type: Node})\r\n    right: Node = null;\r\n\r\n    @property(level_progress_bar)\r\n    levelBarUI: level_progress_bar = null;\r\n    @property(Node)\r\n    level: Node = null;\r\n    listGraphics: Graphics[] = [];\r\n\r\n    private graphics = null;\r\n    private canPlay = true;\r\n    public levelNumber = 1;\r\n    private pSrc: Vec2;\r\n    private pTarget: Vec2;\r\n    private pStart: Vec2;\r\n    private pDrawStart: Vec2;\r\n    private pTemp: Vec2;\r\n    private currentStart: Vec2;\r\n    private firstOne = true;\r\n\r\n    // property(Prefab)\r\n    // graphic: Prefab: \r\n\r\n    start() {\r\n        this.startPlay();\r\n    }\r\n    startPlay() { \r\n        if(this.canPlay){\r\n            let lev = this.level.getComponent(Label).string;\r\n            this.levelNumber = Number(lev);\r\n            tween(this)\r\n            .call(this.initGraphic)\r\n            .call(this.startDraw)\r\n            .start(); \r\n        }\r\n    }\r\n    startDraw(){\r\n        this.draw.on(Node.EventType.TOUCH_START, this.onTouchStart.bind(this));\r\n        this.draw.on(Node.EventType.TOUCH_MOVE, this.onTouchMove.bind(this));\r\n        this.draw.on(Node.EventType.TOUCH_END, this.onTouchEnd.bind(this));\r\n    }\r\n    initGraphic(){\r\n        let graphicsPrefab = VDScreenManager.instance.assetBundle.get('res/prefabs/common/draw', Prefab)!;\r\n        let gNode = instantiate(graphicsPrefab);\r\n        this.draw = gNode;\r\n        let g = instantiate(graphicsPrefab).getComponent(Graphics);\r\n        g.strokeColor = Color.BLACK;\r\n        g.fillColor = Color.BLACK;\r\n        this.area.addChild(gNode);\r\n        g.lineWidth = 10;\r\n        this.graphics = g;\r\n        this.listGraphics.push(this.graphics);\r\n        this.listGraphics[this.listGraphics.length-1].lineWidth = 10;\r\n    }\r\n    onTouchStart(event: EventTouch){\r\n        if(this.firstOne){\r\n            let pLeft = this.left.getWorldPosition();\r\n            this.pStart = v2(pLeft.x, pLeft.y);\r\n            this.pSrc = v2(pLeft.x, pLeft.y);\r\n\r\n            let pRight = this.right.getWorldPosition();\r\n            this.pTarget = v2(pRight.x, pRight.y);\r\n            this.firstOne = false;\r\n        }else {\r\n            this.pStart = v2(this.pTemp.x, this.pTemp.y);\r\n        }\r\n        // gan vi tri bat dau ve\r\n        let p = event.getUILocation();\r\n        this.pDrawStart = v2(p.x, p.y);\r\n        // xu ly ve\r\n        let out = v3();\r\n        this.area.inverseTransformPoint(out, v3(p.x, p.y, 0));\r\n        let g = this.listGraphics[this.listGraphics.length-1];\r\n        g.moveTo(out.x, out.y);\r\n    }\r\n    onTouchMove(event: EventTouch){\r\n        let p = event.getUILocation();\r\n        let out = v3();\r\n        this.area.inverseTransformPoint(out, v3(p.x, p.y, 0));\r\n        let g = this.listGraphics[this.listGraphics.length-1];\r\n        g.lineTo(out.x, out.y);\r\n        g.stroke();\r\n    }\r\n    onTouchEnd(event: EventTouch){\r\n        let p = event.getUILocation();\r\n        log(\"compare: \", this.pStart, this.pDrawStart);\r\n        let dx = Math.abs(this.pStart.x-this.pDrawStart.x);\r\n        let dy = Math.abs(this.pStart.y-this.pDrawStart.y);\r\n        if(dx>40 || dy>40){\r\n            log(\"draw again!\");\r\n            this.pTemp = v2(this.pStart.x, this.pStart.y);\r\n            this.handleDrawAgain();\r\n            \r\n        }else {\r\n            log(\"draw continue!\");\r\n            this.pTemp = v2(p.x, p.y);\r\n            this.handleDrawContinue();\r\n            //check answer before draw coninue;\r\n            this.checkAnswer();\r\n        }\r\n        \r\n    }\r\n    handleDrawAgain(){\r\n        let g = this.listGraphics.pop();\r\n        if(g === this.listGraphics.pop()){\r\n            log(\"same grap\");\r\n        }\r\n        log(\"check arr graphic: \", this.listGraphics);\r\n        g.clear();\r\n        this.initGraphic();\r\n    }\r\n    handleDrawContinue(){\r\n        this.initGraphic();\r\n        let g = this.listGraphics[this.listGraphics.length-1];\r\n        log(\"check arr graphic: \", this.listGraphics);\r\n\r\n        //quy doi ve cung toa do\r\n        let out1 = v3();\r\n        this.area.inverseTransformPoint(out1, v3(this.pDrawStart.x, this.pDrawStart.y, 0));\r\n        // di chuyen ve diem can ve\r\n        g.moveTo(out1.x, out1.y);\r\n        this.area.inverseTransformPoint(out1, v3(this.pStart.x, this.pStart.y, 0));\r\n        // ve den diem can ve\r\n        g.lineTo(out1.x, out1.y);\r\n        g.stroke();\r\n    }\r\n    onClickInstruction() {\r\n        // scaleTo(this.answer, ScaleFactor.BIG_BY_2, ScaleFactor.SMALL_BY_0_5, TimeFactor.MEDIUM, this.toDefault.bind(this));\r\n    }\r\n    onClickBack() {\r\n        VDScreenManager.instance.popToRootScreen();\r\n    } \r\n    checkAnswer(){\r\n        if(this.canPlay){\r\n            let dx = Math.abs(this.pTarget.x - this.pTemp.x);\r\n            let dy = Math.abs(this.pTarget.y - this.pTemp.y);\r\n            if(dx<50 && dy<50) {\r\n                this.processCorrect();\r\n                // bo sung them phan chuyen net noi thanh duong thang\r\n                let g = this.graphics;\r\n                g.clear();\r\n                g.strokeColor = Color.RED;\r\n                let out1 = v3();\r\n                this.area.inverseTransformPoint(out1, v3(this.pSrc.x, this.pSrc.y, 0));\r\n                g.moveTo(out1.x, out1.y);\r\n\r\n                this.area.inverseTransformPoint(out1, v3(this.pTarget.x, this.pTarget.y, 0));\r\n                g.lineTo(out1.x, out1.y);\r\n                g.stroke();\r\n            }\r\n        }\r\n    }\r\n    processCorrect(){\r\n        let ob = LocalDataManager.getObject(\"check\", {});\r\n        let checkDone = ob.science[this.levelNumber+1];\r\n        if(this.levelBarUI){\r\n            if(!checkDone) {\r\n                this.levelBarUI.handleProgress();\r\n            }\r\n            ob.science[this.levelNumber+1] = true;\r\n            LocalDataManager.setObject(\"check\", ob);\r\n        }\r\n        \r\n        this.canPlay = false;\r\n        this.fireWork.active = true;\r\n        tween(this.fireWork)\r\n        .to(3, {scale: v3(1, 1, 0)})\r\n        .call(()=>{\r\n            this.showPopupNext();\r\n        })\r\n        .call(()=>{\r\n            this.fireWork.active = false;\r\n        })\r\n        .start();\r\n        // this.smile.active = true;\r\n        // this.smile.setScale( v3(0.1, 0.1, 0));\r\n        // scaleAndHide(this.smile, v3(0.6, 0.6, 0), 2);\r\n    }\r\n    processWrong(){\r\n        // this.cry.active = true;\r\n        // tween(this.cry)\r\n        // .to(1, {scale: v3(0.08, 0.08, 0)})\r\n        // .to(0.2, {scale: v3(0, 0, 0)})\r\n        // .start();\r\n    }\r\n    update(deltaTime: number) {\r\n        \r\n    }\r\n    // active popup next\r\n    showPopupNext() {\r\n        log(\"check\", this.levelNumber);\r\n        VDScreenManager.instance.showPopupFromPrefabName(\"res/prefabs/popup/popup_next\", (popup: VDBasePopup) => {\r\n            let popupWin = popup as popup_next;\r\n            // dinh nghia finshedCallBack chua goi nó\r\n            popupWin.finishedCallback = () => {\r\n                let level2_screen = VDScreenManager.instance.assetBundle.get('res/prefabs/screen/science/level'+String(this.levelNumber+1), Prefab)!;\r\n                VDScreenManager.instance.pushScreen(level2_screen, (screen: VDBaseScreen) => { }, true); \r\n                log(' Just Closed Popup !!!');\r\n            };\r\n        }, false, true, true);\r\n    }\r\n}\r\n\r\n\r\n"]}