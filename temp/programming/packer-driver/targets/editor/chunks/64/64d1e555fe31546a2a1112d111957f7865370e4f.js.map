{"version":3,"sources":["file:///D:/game/FrameworkCocos/assets/vd-games/preschool-exam/script/screens/science/level2_science.ts"],"names":["_decorator","Component","Node","log","Prefab","tween","v3","Label","Graphics","VDScreenManager","level_progress_bar","LocalDataManager","scaleAndHide","ccclass","property","level2_science","type","graphics","canPlay","levelNumber","isShowPopup","start","lev","level","getComponent","string","Number","startPlay","i","listAnswers","length","on","EventType","TOUCH_START","onTouchStart","bind","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","initGraphic","event","onClickInstruction","onClickBack","instance","popToRootScreen","checkAnswer","processCorrect","processWrong","ob","getObject","checkDone","science","levelBarUI","handleProgress","setObject","fireWork","active","to","scale","call","showPopupNext","smile","setScale","cry","update","deltaTime","showPopupFromPrefabName","popup","popupWin","finishedCallback","level2_screen","assetBundle","get","String","pushScreen","screen"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Sprite, Color, log, Prefab, tween, v3, Label, Vec3, Button, UIOpacity, EventTouch, Graphics } from 'cc';\r\nimport VDBaseScreen from '../../../../../vd-framework/ui/VDBaseScreen';\r\nimport VDScreenManager from '../../../../../vd-framework/ui/VDScreenManager';\r\nimport { ScaleFactor, scaleTo, scaleTo2, TimeFactor } from '../../transiton/Transformation';\r\n\r\nimport { level_progress_bar } from '../../transiton/level_progress_bar';\r\nimport LocalDataManager from '../../common/LocalDataManager';\r\nimport { handleFirework } from '../../common/handleFirework';\r\nimport { scaleAndHide } from '../../transiton/Transformation';\r\nimport VDBasePopup from '../../../../../vd-framework/ui/VDBasePopup';\r\nimport { popup_next } from '../../popups/popup_next';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('level2_science')\r\nexport class level2_science extends Component {\r\n    @property({type: Node})\r\n    listAnswers: Node[] = [];\r\n    @property({type: Node})\r\n    listQuestion: Node[] = [];\r\n    @property({type: Node})\r\n    smile: Node = null;\r\n    @property({type: Node})\r\n    cry: Node = null;\r\n    @property({type: Node})\r\n    fireWork: Node = null;\r\n\r\n    @property(level_progress_bar)\r\n    levelBarUI: level_progress_bar = null;\r\n    @property(Node)\r\n    level: Node = null;\r\n\r\n    private graphics = null;\r\n    private canPlay = true;\r\n    public levelNumber = 1;\r\n    public isShowPopup = false;\r\n    start() {\r\n        let lev = this.level.getComponent(Label).string;\r\n        this.levelNumber = Number(lev);\r\n        this.startPlay();\r\n    }\r\n    startPlay() { \r\n        this.isShowPopup = false;\r\n        if(this.canPlay){\r\n            for(let i=0; i<this.listAnswers.length; i++) {\r\n                this.listAnswers[i].on(Node.EventType.TOUCH_START, this.onTouchStart.bind(this, i));\r\n                this.listAnswers[i].on(Node.EventType.TOUCH_MOVE, this.onTouchMove.bind(this, i));\r\n                this.listAnswers[i].on(Node.EventType.TOUCH_END, this.onTouchEnd.bind(this, i));\r\n\r\n            }\r\n        }\r\n        \r\n    }\r\n    initGraphic(i: number){\r\n        this.graphics = this.listAnswers[i].getComponent(Graphics);\r\n    }\r\n    onTouchStart(event: EventTouch){\r\n\r\n    }\r\n    onTouchMove(event: EventTouch){\r\n\r\n    }\r\n    onTouchEnd(event: EventTouch){\r\n\r\n    }\r\n    onClickInstruction() {\r\n        // scaleTo(this.answer, ScaleFactor.BIG_BY_2, ScaleFactor.SMALL_BY_0_5, TimeFactor.MEDIUM, this.toDefault.bind(this));\r\n    }\r\n    onClickBack() {\r\n        VDScreenManager.instance.popToRootScreen();\r\n    } \r\n    checkAnswer(i: number){\r\n        if(this.canPlay){\r\n            if(i==0) {\r\n                this.processCorrect();\r\n            }else {\r\n                this.processWrong();\r\n            }\r\n        }\r\n        \r\n        \r\n    }\r\n    processCorrect(){\r\n        let ob = LocalDataManager.getObject(\"check\", {});\r\n        let checkDone = ob.science[this.levelNumber];\r\n        if(this.levelBarUI){\r\n            if(!checkDone) {\r\n                this.levelBarUI.handleProgress();\r\n            }\r\n            ob.science[this.levelNumber+1] = true;\r\n            LocalDataManager.setObject(\"check\", ob);\r\n        }\r\n        \r\n        this.canPlay = false;\r\n        this.fireWork.active = true;\r\n        // scaleAndHide(this.fireWork, v3(1, 1, 0), 3, this.showPopupNext);\r\n        tween(this.fireWork)\r\n        .to(3, {scale: v3(1, 1, 0)})\r\n        .call(()=>{\r\n            this.showPopupNext();\r\n        })\r\n        .call(()=>{\r\n            this.fireWork.active = false;\r\n        })\r\n        .start();\r\n        this.smile.active = true;\r\n        this.smile.setScale( v3(0.1, 0.1, 0));\r\n        scaleAndHide(this.smile, v3(0.6, 0.6, 0), 2);\r\n        // scaleTo2(this.answer, v3(1.2, 1.2, 0), 2);\r\n        // let sprite =  this.answer.getComponent();\r\n        \r\n        // this.nextBtn.active = true;\r\n    }\r\n    processWrong(){\r\n        this.cry.active = true;\r\n        tween(this.cry)\r\n        .to(1, {scale: v3(0.08, 0.08, 0)})\r\n        .to(0.2, {scale: v3(0, 0, 0)})\r\n        .start();\r\n    }\r\n    update(deltaTime: number) {\r\n        \r\n    }\r\n    // active popup next\r\n    showPopupNext() {\r\n        log(\"check\", this.levelNumber);\r\n        VDScreenManager.instance.showPopupFromPrefabName(\"res/prefabs/popup/popup_next\", (popup: VDBasePopup) => {\r\n            let popupWin = popup as popup_next;\r\n            // dinh nghia finshedCallBack chua goi n√≥\r\n            popupWin.finishedCallback = () => {\r\n                let level2_screen = VDScreenManager.instance.assetBundle.get('res/prefabs/screen/comparison/level'+String(this.levelNumber+1), Prefab)!;\r\n                VDScreenManager.instance.pushScreen(level2_screen, (screen: VDBaseScreen) => { }, true); \r\n                log(' Just Closed Popup !!!');\r\n            };\r\n            \r\n            \r\n            \r\n        }, false, true, true);\r\n        // if(!this.popupNext) {\r\n            \r\n        // }\r\n        \r\n    }\r\n}\r\n\r\n\r\n"]}