{"version":3,"sources":["file:///D:/game/FrameworkCocos/assets/vd-games/preschool-exam/script/screens/complete_picture/level1_picture.ts"],"names":["_decorator","Component","Node","Prefab","log","VDScreenManager","ccclass","property","level1_picture","type","nextBtn","sum","canPick","onClickBtnNext","event","data","level2_screen","instance","assetBundle","get","String","pushScreen","screen","onClickBtnBack","popScreen","onClickInstruction","start","startPlay","i","itemQuestions","length","on","check_startPositon","bind","p","getWorldPosition","checkPosition","questionP","answerP","answer","dx","Math","abs","x","dy","y","active","handleCorrect","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, log, Sprite } from \"cc\";\r\nimport VDBaseScreen from \"../../../../../vd-framework/ui/VDBaseScreen\";\r\nimport VDScreenManager from \"../../../../../vd-framework/ui/VDScreenManager\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"level1_picture\")\r\nexport class level1_picture extends Component {\r\n  @property({ type: Node })\r\n  itemQuestions: Node[] = [];\r\n  @property({ type: Node })\r\n  // itemAnswers: Node[] = [];\r\n  // @property({type: Node})\r\n  @property(Node)\r\n  answer: Node = null;\r\n  nextBtn: Node = null;\r\n  private sum = 0;\r\n\r\n  private canPick = true;\r\n\r\n  onClickBtnNext(event: TouchEvent, data: any) {\r\n    log(\"check number: \", data);\r\n    let level2_screen = VDScreenManager.instance.assetBundle.get(\r\n      \"res/prefabs/screen/complete_picture/level\" + String(data),\r\n      Prefab\r\n    )!;\r\n    VDScreenManager.instance.pushScreen(\r\n      level2_screen,\r\n      (screen: VDBaseScreen) => {},\r\n      true\r\n    );\r\n  }\r\n  onClickBtnBack() {\r\n    VDScreenManager.instance.popScreen(true);\r\n  }\r\n  onClickInstruction() {\r\n    log(\"start instruction\");\r\n  }\r\n  start() {\r\n    this.startPlay();\r\n  }\r\n\r\n  startPlay() {\r\n    if (this.canPick) {\r\n      for (let i = 0; i < this.itemQuestions.length; i++) {\r\n        this.itemQuestions[i].on(\r\n          \"i-am-start\",\r\n          this.check_startPositon.bind(this)\r\n        );\r\n        let p = this.itemQuestions[i].getWorldPosition();\r\n        this.itemQuestions[i].on(\r\n          \"i-am-moving\",\r\n          this.checkPosition.bind(this, i)\r\n        );\r\n      }\r\n    }\r\n  }\r\n  check_startPositon() {\r\n    log(\"check start\");\r\n  }\r\n\r\n  checkPosition(i: number) {\r\n    let questionP = this.itemQuestions[i].getWorldPosition();\r\n    let answerP = this.answer.getWorldPosition();\r\n    log(\"check i: \", this.answer.getWorldPosition());\r\n    let dx = Math.abs(answerP.x - questionP.x);\r\n    let dy = Math.abs(answerP.y+50 - questionP.y);\r\n    if (dx < 40 && dy < 40) {\r\n      if (i == 0) {\r\n        this.itemQuestions[i].active = false;\r\n        this.handleCorrect();\r\n      } else {\r\n        log(\"wrong!\");\r\n      }\r\n    }\r\n    // for(let j = 0; j<this.itemAnswers.length; j++){\r\n    //     let answerP = this.itemAnswers[j].getWorldPosition();\r\n    //     let dx = Math.abs(answerP.x-questionP.x);\r\n    //     let dy = Math.abs(answerP.y-questionP.y);\r\n    //     if(dx<40 && dy<40){\r\n    //         if(i==j){\r\n    //             this.itemQuestions[i].active = false;\r\n    //             let spriteA = this.itemAnswers[i].getComponent(Sprite);\r\n    //             let spriteQ = this.itemQuestions[i].getComponent(Sprite);\r\n    //             spriteA.color = spriteQ.color;\r\n    //             this.sum++;\r\n    //             if(this.sum == 3) {\r\n    //                 this.handleCorrect();\r\n    //             }\r\n    //         }else{\r\n    //             log(\"wrong!\")\r\n    //         }\r\n    //     }\r\n    // }\r\n  }\r\n\r\n  handleCorrect() {\r\n    log(\"correct!\");\r\n    this.nextBtn.active = true;\r\n  }\r\n\r\n  update(deltaTime: number) {}\r\n}\r\n"]}