{"version":3,"sources":["file:///D:/game/FrameworkCocos/assets/vd-games/preschool-exam/script/screens/ex_LoadingScreen.ts"],"names":["_decorator","Component","log","Prefab","sys","VDScreenManager","ccclass","property","ex_LoadingScreen","_audios","_items","onLoad","imageDirs","prefabs","isNative","concat","start","instance","assetBundle","load","err","data","_loadAsset","isBrowser","alert","index","length","_finishedLoading","path","_isDirectory","loadDir","finished","total","endsWith","scheduleOnce","showPopupMessage","message","showPopupFromPrefabName","popup","onClickBtnLevelComparison","play_screen","get","replaceScreenAtIndex","screen","onClickMatchScreen","match_screen","pushScreen","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,G,OAAAA,G;AAAKC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,G,OAAAA,G;;AAG5CC,MAAAA,e;;;;;;;;;OAGD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;kCAKjBQ,gB,WADZF,OAAO,CAAC,kBAAD,C,gBAAR,MACaE,gBADb,SACsCP,SADtC,CACgD;AAAA;AAAA;AAAA,eACpCQ,OADoC,GACC,EADD;AAAA,eAEpCC,MAFoC,GAEjB,EAFiB;AAAA;;AAG5CC,QAAAA,MAAM,GAAG;AACL;AACA;AACA;AACA;AAEA,cAAIC,SAAS,GAAG,CACZ,YADY,EAEZ,iBAFY,CAAhB,CANK,CAWL;AACA;AACA;AACA;;AAEA,cAAIC,OAAO,GAAG,CACV,0BADU,EAEV,iCAFU,EAGV,4CAHU,EAIV,sCAJU,CAAd;AAOA,cAAIT,GAAG,CAACU,QAAR,EAAkB,KAAKJ,MAAL,GAAc,KAAKA,MAAL,CAAYK,MAAZ,CAAmBH,SAAnB,CAAd;AAElB,eAAKF,MAAL,GAAc,KAAKA,MAAL,CACV;AADU,WAETK,MAFS,CAEFF,OAFE,CAAd;AAGH;;AACDG,QAAAA,KAAK,GAAG;AACJ;AAAA;AAAA,kDAAgBC,QAAhB,CAAyBC,WAAzB,CAAqCC,IAArC,CAA0C,gCAA1C,EACA,CAACC,GAAD,EAAMC,IAAN,KAAe;AACX,gBAAI,CAACD,GAAL,EAAU;AACN,mBAAKE,UAAL,CAAgB,CAAhB;AACH,aAFD,MAGK;AACDpB,cAAAA,GAAG,CAAC,iBAAiBkB,GAAjB,GAAuB,aAAxB,CAAH;;AACA,kBAAIhB,GAAG,CAACmB,SAAR,EAAmB;AACfC,gBAAAA,KAAK,CAAC,oCAAD,CAAL;AACH;AACJ;AACJ,WAXD;AAYH;;AACOF,QAAAA,UAAU,CAACG,KAAD,EAAgB;AAC9B,cAAIA,KAAK,IAAI,KAAKf,MAAL,CAAYgB,MAAzB,EAAiC;AAC7B,iBAAKC,gBAAL;;AACA;AACH;;AACD,cAAIC,IAAI,GAAG,KAAKlB,MAAL,CAAYe,KAAZ,CAAX;AACAvB,UAAAA,GAAG,CAAC,iBAAiB0B,IAAlB,CAAH;;AACA,cAAI,KAAKC,YAAL,CAAkBD,IAAlB,CAAJ,EAA6B;AACzB;AAAA;AAAA,oDAAgBX,QAAhB,CAAyBC,WAAzB,CAAqCY,OAArC,CAA6CF,IAA7C,EACI,CAACG,QAAD,EAAWC,KAAX,KAAqB,CACjB;AACH,aAHL,EAII,CAACZ,GAAD,EAAMC,IAAN,KAAe;AACX,kBAAIjB,GAAG,CAACU,QAAJ,KAAiBc,IAAI,CAACK,QAAL,CAAc,OAAd,KAA0BL,IAAI,CAACK,QAAL,CAAc,OAAd,CAA3C,CAAJ,EAAwE,CACpE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACH;;AAED,kBAAI,CAACb,GAAL,EAAU;AACN,qBAAKc,YAAL,CAAkB,MAAM;AACpB,uBAAKZ,UAAL,CAAgBG,KAAK,GAAG,CAAxB;AACH,iBAFD,EAEG,CAFH;AAGH,eAJD,MAIO;AACHvB,gBAAAA,GAAG,CAAC,iBAAiBkB,GAAjB,GAAuB,MAAvB,GAAgCQ,IAAjC,CAAH;;AACA,oBAAIxB,GAAG,CAACmB,SAAR,EAAmB;AACf,uBAAKY,gBAAL,CAAsB,4CAAtB;AACH;AACJ;AACJ,aA3BL;AA4BH,WA7BD,MA8BK;AACD;AAAA;AAAA,oDAAgBlB,QAAhB,CAAyBC,WAAzB,CAAqCC,IAArC,CAA0CS,IAA1C,EACI,CAACG,QAAD,EAAWC,KAAX,KAAqB,CACjB;AACA;AACH,aAJL,EAKI,CAACZ,GAAD,EAAMC,IAAN,KAAe;AACX,kBAAI,CAACD,GAAL,EAAU;AACN,qBAAKc,YAAL,CAAkB,MAAM;AACpB,uBAAKZ,UAAL,CAAgBG,KAAK,GAAG,CAAxB;AACH,iBAFD,EAEG,CAFH;AAGH,eAJD,MAKK;AACDvB,gBAAAA,GAAG,CAAC,iBAAiBkB,GAAjB,GAAuB,MAAvB,GAAgCQ,IAAjC,CAAH;;AACA,oBAAIxB,GAAG,CAACmB,SAAR,EAAmB;AACf,uBAAKY,gBAAL,CAAsB,4CAAtB;AACH;AACJ;AACJ,aAjBL;AAkBH;AACJ;;AACOA,QAAAA,gBAAgB,CAACC,OAAD,EAAkB;AACtC;AAAA;AAAA,kDAAgBnB,QAAhB,CAAyBoB,uBAAzB,CAAiD,gCAAjD,EAAoFC,KAAD,IAAwB,CAC1G,CADD,EACG,IADH,EACS,IADT,EACe,KADf;AAEH;;AACOX,QAAAA,gBAAgB,GAAG;AACvBzB,UAAAA,GAAG,CAAE,iCAAF,CAAH;AACH;;AAEDqC,QAAAA,yBAAyB,GAAG;AACxBrC,UAAAA,GAAG,CAAE,qBAAF,CAAH,CADwB,CAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAIsC,WAAW,GAAG;AAAA;AAAA,kDAAgBvB,QAAhB,CAAyBC,WAAzB,CAAqCuB,GAArC,CAAyC,4CAAzC,EAAuFtC,MAAvF,CAAlB;AACA;AAAA;AAAA,kDAAgBc,QAAhB,CAAyByB,oBAAzB,CAA8CF,WAA9C,EAA2D,CAA3D,EAA+DG,MAAD,IAA0B,CAEvF,CAFD;AAKH;;AACDC,QAAAA,kBAAkB,GAAG;AACjB1C,UAAAA,GAAG,CAAC,uBAAD,CAAH;AACA,cAAI2C,YAAY,GAAG;AAAA;AAAA,kDAAgB5B,QAAhB,CAAyBC,WAAzB,CAAqCuB,GAArC,CAAyC,2BAAzC,EAAsEtC,MAAtE,CAAnB;AACA;AAAA;AAAA,kDAAgBc,QAAhB,CAAyB6B,UAAzB,CAAoCD,YAApC,EAAmDF,MAAD,IAA0B,CAAG,CAA/E,EAAiF,IAAjF,EAHiB,CAIjB;AACA;AAEA;AACH;;AACOd,QAAAA,YAAY,CAACD,IAAD,EAA+B;AAC/C,iBAAOA,IAAI,IAAI,IAAR,IAAgB,OAAOA,IAAP,IAAe,QAA/B,IAA2CA,IAAI,CAACF,MAAL,GAAc,CAAzD,IAA8DE,IAAI,CAACA,IAAI,CAACF,MAAL,GAAc,CAAf,CAAJ,IAAyB,GAA9F;AACH;;AACDqB,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AApJ2C,O","sourcesContent":["import { _decorator, Component, Node, log, Prefab, sys, Asset, AudioClip } from 'cc';\r\nimport VDBasePopup from '../../../../vd-framework/ui/VDBasePopup';\r\nimport VDBaseScreen from '../../../../vd-framework/ui/VDBaseScreen';\r\nimport VDScreenManager from '../../../../vd-framework/ui/VDScreenManager';\r\nimport { ex_Director } from '../common/ex_Director';\r\nimport { ex_LevelComparison } from './ex_LevelComparison';\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\n\r\n@ccclass('ex_LoadingScreen')\r\nexport class ex_LoadingScreen extends Component {\r\n    private _audios: { [key: string]: string } = {};\r\n    private _items: string[] = [];\r\n    onLoad() {\r\n        // let soundDirs = [\r\n        //     'res/sounds/bgm/',\r\n        //     'res/sounds/sfx/',\r\n        // ];\r\n\r\n        let imageDirs = [\r\n            'res/fonts/',\r\n            'res/images/bgr/',\r\n        ];\r\n\r\n        // let prefabDirs = [\r\n        //     'res/anims/prefabs/',\r\n        //     'res/prefabs/popup/',\r\n        // ];\r\n\r\n        let prefabs = [\r\n            'res/prefabs/screen/match',\r\n            'res/prefabs/screen/match/level1',\r\n            'res/prefabs/screen/level_comparison_screen',\r\n            'res/prefabs/screen/comparison/level1',\r\n        ];\r\n\r\n        if (sys.isNative) this._items = this._items.concat(imageDirs);\r\n\r\n        this._items = this._items\r\n            // .concat(prefabDirs)\r\n            .concat(prefabs);\r\n    }\r\n    start() {\r\n        VDScreenManager.instance.assetBundle.load('res/prefabs/popup/popup_notify',\r\n        (err, data) => {\r\n            if (!err) {\r\n                this._loadAsset(0);\r\n            }\r\n            else {\r\n                log(\"load error  \" + err + \" _loadAsset\");\r\n                if (sys.isBrowser) {\r\n                    alert(\"Không có kết nối, vui lòng thử lại\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n    private _loadAsset(index: number) {\r\n        if (index >= this._items.length) {\r\n            this._finishedLoading();\r\n            return;\r\n        }\r\n        let path = this._items[index];\r\n        log(\"_loadAsset  \" + path);\r\n        if (this._isDirectory(path)) {\r\n            VDScreenManager.instance.assetBundle.loadDir(path,\r\n                (finished, total) => {\r\n                    // log(`items #${index}:  ${finished} / ${total} `);\r\n                },\r\n                (err, data) => {\r\n                    if (sys.isNative && (path.endsWith('/bgm/') || path.endsWith('/sfx/'))) {\r\n                        // log(`AudioClip loaded:${JSON.stringify(this._audios)}`);\r\n                        // let assets: Asset[] = data;\r\n                        // for (let as of assets) {\r\n                        //     if (as instanceof AudioClip) {\r\n                        //         this._audios[`${path}${as.name}`] = `${as._nativeAsset.url}`;\r\n                        //     }\r\n                        // }\r\n\r\n                        // this._initAudio();\r\n                    }\r\n\r\n                    if (!err) {\r\n                        this.scheduleOnce(() => {\r\n                            this._loadAsset(index + 1);\r\n                        }, 0);\r\n                    } else {\r\n                        log(\"load error  \" + err + \"    \" + path);\r\n                        if (sys.isBrowser) {\r\n                            this.showPopupMessage(\"Đã có lỗi tải tài nguyên, vui lòng thử lại\");\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n        else {\r\n            VDScreenManager.instance.assetBundle.load(path,\r\n                (finished, total) => {\r\n                    // log(`${finished} / ${total} `);\r\n                    // this.loadingProgress.progress = index * totalPercent + finished / total * totalPercent;\r\n                },\r\n                (err, data) => {\r\n                    if (!err) {\r\n                        this.scheduleOnce(() => {\r\n                            this._loadAsset(index + 1);\r\n                        }, 0);\r\n                    }\r\n                    else {\r\n                        log(\"load error  \" + err + \"    \" + path);\r\n                        if (sys.isBrowser) {\r\n                            this.showPopupMessage(\"Đã có lỗi tải tài nguyên, vui lòng thử lại\");\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    }\r\n    private showPopupMessage(message: string) {\r\n        VDScreenManager.instance.showPopupFromPrefabName(\"res/prefabs/popup/popup_notify\", (popup: VDBasePopup) => {\r\n        }, true, true, false);\r\n    }\r\n    private _finishedLoading() {\r\n        log(`LoadingScreen: _finishedLoading`);\r\n    }\r\n\r\n    onClickBtnLevelComparison() {\r\n        log(`onClickBtn2MainGame`);\r\n        // VDScreenManager.instance.assetBundle.load(\"res/prefabs/screen/level_comparison_screen\", Prefab, (error, prefab) => {\r\n        //     if (error) {\r\n        //         log(`bundle.load: ${error}`);\r\n        //     }\r\n        //     else {\r\n        //         log(\"load loading sucess\")\r\n        //         // VDScreenManager.instance.initWithRootScreen(prefab);\r\n        //         VDScreenManager.instance.initWithRootScreen(prefab, (screen) => {\r\n        //             log('initWithRootScreen ' + screen.name + ' success!');\r\n        //         });\r\n        //     }\r\n        // })\r\n\r\n        let play_screen = VDScreenManager.instance.assetBundle.get('res/prefabs/screen/level_comparison_screen', Prefab)!;\r\n        VDScreenManager.instance.replaceScreenAtIndex(play_screen, 0, (screen: VDBaseScreen) => {\r\n            \r\n        });\r\n\r\n\r\n    }\r\n    onClickMatchScreen() {\r\n        log(\"on click match screen\")\r\n        let match_screen = VDScreenManager.instance.assetBundle.get('res/prefabs/screen/level1', Prefab)!;\r\n        VDScreenManager.instance.pushScreen(match_screen, (screen: VDBaseScreen) => { }, true);\r\n        // let play_screen = VDScreenManager.instance.assetBundle.get('res/prefabs/screen/level1', Prefab)!;\r\n        // VDScreenManager.instance.replaceScreenAtIndex(play_screen, 0, (screen: VDBaseScreen) => {\r\n            \r\n        // });\r\n    }\r\n    private _isDirectory(path: string | null): boolean {\r\n        return path != null && typeof path == 'string' && path.length > 0 && path[path.length - 1] == '/';\r\n    }\r\n    update(deltaTime: number) {\r\n        \r\n    }\r\n}\r\n\r\n\r\n"]}