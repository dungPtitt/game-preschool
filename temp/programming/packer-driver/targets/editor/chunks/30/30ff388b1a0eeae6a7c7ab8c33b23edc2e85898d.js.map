{"version":3,"sources":["file:///D:/game/FrameworkCocos/assets/vd-games/preschool-exam/script/screens/comparison/level1_comp.ts"],"names":["_decorator","Component","Node","Sprite","Color","log","Prefab","tween","v3","VDScreenManager","ScaleFactor","scaleTo","TimeFactor","level_progress_bar","LocalDataManager","ccclass","property","level1_comp","type","progressLevelBar","canPlay","onClickInstruction","levelBarUI","handleProgress","answer","BIG_BY_2","SMALL_BY_0_5","MEDIUM","toDefault","bind","onClickBtnNext","event","data","level2_screen","instance","assetBundle","get","String","pushScreen","screen","onClickBack","popScreen","start","checkDone","getObject","check","comparison","level1","startPlay","i","items","length","on","EventType","TOUCH_END","checkAnswer","processCorrect","processWrong","smile","active","sprite","getComponent","color","nextBtn","cry","to","scale","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Sprite, Color, log, Prefab, tween, v3 } from 'cc';\r\nimport VDBaseScreen from '../../../../../vd-framework/ui/VDBaseScreen';\r\nimport VDScreenManager from '../../../../../vd-framework/ui/VDScreenManager';\r\nimport { ScaleFactor, scaleTo, TimeFactor } from '../../transiton/Transformation';\r\n\r\nimport { level_progress_bar } from '../../transiton/level_progress_bar';\r\nimport LocalDataManager from '../../common/LocalDataManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('level1_comp')\r\nexport class level1_comp extends Component {\r\n    @property({type: Node})\r\n    answer: Node = null;\r\n    @property({type: Node})\r\n    pointer: Node = null;\r\n    @property({type: Node})\r\n    smile: Node = null;\r\n    @property({type: Node})\r\n    cry: Node = null;\r\n    @property({type: Node})\r\n    nextBtn: Node = null;\r\n\r\n    @property(level_progress_bar)\r\n    levelBarUI: level_progress_bar = null;\r\n    // mac dinh item[0] chua dap an\r\n    @property({type: Node})\r\n    items: Node[] = [];\r\n\r\n    progressLevelBar?: level_progress_bar;\r\n    private canPlay = true;\r\n\r\n    onClickInstruction() {\r\n        if(this.levelBarUI){\r\n            this.levelBarUI.handleProgress();\r\n        }\r\n        // this.pointer.active = true;\r\n        // let p = this.answer.getWorldPosition();\r\n        // this.pointer.setWorldPosition(p.x, p.y, 0);\r\n        // let sprite =  this.answer.getComponent(Sprite);\r\n        // sprite.color = new Color(67, 14, 180); \r\n        scaleTo(this.answer, ScaleFactor.BIG_BY_2, ScaleFactor.SMALL_BY_0_5, TimeFactor.MEDIUM, this.toDefault.bind(this));\r\n    }\r\n\r\n    onClickBtnNext(event: TouchEvent, data: any) {\r\n        log(\"check number: \", data)\r\n        \r\n        let level2_screen = VDScreenManager.instance.assetBundle.get('res/prefabs/screen/comparison/level'+String(data), Prefab)!;\r\n        VDScreenManager.instance.pushScreen(level2_screen, (screen: VDBaseScreen) => { }, true);\r\n        // xoa man choi hien tai\r\n        // VDScreenManager.instance.popScreen(true);\r\n        // cong them kinh nghiem\r\n        \r\n    }\r\n\r\n    onClickBack() {\r\n        //cach 1\r\n        // log(`onClickBtnPrevious`);\r\n        VDScreenManager.instance.popScreen(true);\r\n    }\r\n\r\n    toDefault() {\r\n        // let sprite =  this.answer.getComponent(Sprite);\r\n        // sprite.color = new Color(204, 204, 204);\r\n        // this.pointer.active = false;\r\n    }\r\n    start() {\r\n        let checkDone = LocalDataManager.getObject(\"check\", {});\r\n        let check = checkDone.comparison[0].level1;\r\n        this.canPlay = ! check;\r\n        // let check = LocalDataManager.getObject(\"check\", {});\r\n        // let arr = check.comparison;\r\n        // this.canPlay = arr[0];\r\n    }\r\n\r\n    startPlay() { \r\n        if(this.canPlay){\r\n            for(let i=0; i<this.items.length; i++) {\r\n                this.items[i].on(Node.EventType.TOUCH_END, this.checkAnswer.bind(this, i));\r\n            }\r\n        } \r\n    }\r\n    checkAnswer(i: number){\r\n        if(i==0) {\r\n            this.processCorrect();\r\n        }else {\r\n            this.processWrong();\r\n        }\r\n        \r\n    }\r\n    processCorrect(){\r\n        let check = LocalDataManager.getObject(\"check\", {});\r\n        check.comparison[0].level1 = true;\r\n        this.canPlay = false;\r\n        if(this.levelBarUI){\r\n            this.levelBarUI.handleProgress();\r\n        }\r\n        this.smile.active = true;\r\n        let sprite =  this.answer.getComponent(Sprite);\r\n        sprite.color = new Color(67, 14, 180);\r\n        this.nextBtn.active = true;\r\n    }\r\n    processWrong(){\r\n        this.cry.active = true;\r\n        tween(this.cry)\r\n        .to(1, {scale: v3(0.08, 0.08, 0)})\r\n        .to(0.2, {scale: v3(0, 0, 0)})\r\n        .start();\r\n    }\r\n    update(deltaTime: number) {\r\n        if(this.canPlay){\r\n            this.startPlay();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}