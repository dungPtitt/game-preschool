{"version":3,"sources":["file:///D:/game/FrameworkCocos/assets/vd-games/preschool-exam/script/screens/ex_LoadingScreen2.ts"],"names":["_decorator","Component","ProgressBar","Label","ccclass","property","ex_LoadingScreen2","_audios","_items","onLoad","soundDirs","imageDirs","prefabDirs","prefabs","sys","isNative","concat","_setVersion","dm_Config","versionGame","start","loadingProgress","progress","percent","length","isBrowser","_loadAudioWeb","VDScreenManager","instance","assetBundle","load","err","data","_loadAsset","log","alert","forEach","soundsPath","sounds","getDirWithPath","AudioClip","sound","path","nativeUrl","assetManager","utils","getUrlWithUuid","uuid","nativeExt","_initAudio","VDAudioManager","init","isMuteMusic","VDLocalDataManager","getBoolean","ENABLE_MUSIC","isMuteSfx","ENABLE_SFX","isMutingMusic","isMutingEffect","index","totalPercent","_finishedLoading","_isDirectory","loadDir","finished","total","endsWith","assets","as","name","_nativeAsset","url","scheduleOnce","showPopupMessage","onClickBtn2MainGame","play_screen","get","Prefab","replaceScreenAtIndex","screen","dm_Director","playScreen","message","showPopupFromPrefabName","popup","version","lbVersion","string"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, ProgressBar, Label } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('ex_LoadingScreen2')\r\nexport class ex_LoadingScreen2 extends Component {\r\n    @property(ProgressBar)\r\n    loadingProgress: ProgressBar = null!;\r\n\r\n    @property(Label)\r\n    lbVersion: Label = null!;\r\n\r\n    private _audios: { [key: string]: string } = {};\r\n    private _items: string[] = [];\r\n\r\n    onLoad() {\r\n        let soundDirs = [\r\n            'res/sounds/bgm/',\r\n            'res/sounds/sfx/',\r\n        ];\r\n\r\n        let imageDirs = [\r\n            'res/fonts/',\r\n            'res/images/bgr/',\r\n        ];\r\n\r\n        let prefabDirs = [\r\n            'res/anims/prefabs/',\r\n            'res/prefabs/popup/',\r\n        ];\r\n\r\n        let prefabs = [\r\n            'res/prefabs/transition/transition_cloud',\r\n            'res/prefabs/screen/play_screen',\r\n            'res/prefabs/screen/play_screen_2',\r\n            'res/prefabs/screen/play_screen_3',\r\n        ];\r\n\r\n        if (sys.isNative) this._items = this._items.concat(soundDirs);\r\n\r\n        this._items = this._items\r\n            // .concat(soundDirs)\r\n            .concat(imageDirs)\r\n            .concat(prefabDirs)\r\n            .concat(prefabs);\r\n\r\n        this._setVersion(dm_Config.versionGame);\r\n    }\r\n\r\n    start() {\r\n\r\n        this.loadingProgress.progress = 0;\r\n\r\n        let percent = 1.0 / (this._items.length + 1);\r\n        sys.isBrowser && this._loadAudioWeb();\r\n        VDScreenManager.instance.assetBundle.load('res/prefabs/popup/popup_notify',\r\n            (err, data) => {\r\n                if (!err) {\r\n                    this._loadAsset(0, percent);\r\n                }\r\n                else {\r\n                    log(\"load error  \" + err + \" _loadAsset\");\r\n                    if (sys.isBrowser) {\r\n                        alert(\"Không có kết nối, vui lòng thử lại\");\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    private _loadAudioWeb() {\r\n        let soundDirs = [\r\n            'res/sounds/bgm/',\r\n            'res/sounds/sfx/',\r\n        ];\r\n        soundDirs.forEach(soundsPath => {\r\n            const sounds = VDScreenManager.instance.assetBundle.getDirWithPath(soundsPath, AudioClip);\r\n            sounds.forEach(sound => {\r\n                if (this._audios[`${sound.path}`]) return;\r\n                const nativeUrl = assetManager.utils.getUrlWithUuid(sound.uuid, { isNative: true, nativeExt: '.mp3' });\r\n                // log('sound', sound.path, sound.uuid, nativeUrl);\r\n                // log('sound', assetManager.utils.getUrlWithUuid(sound.uuid, { isNative: false }))\r\n                this._audios[`${sound.path}`] = nativeUrl;\r\n            })\r\n        });\r\n\r\n        this._initAudio();\r\n    }\r\n\r\n    private _initAudio() {\r\n        VDAudioManager.instance.init(this._audios);\r\n\r\n        let isMuteMusic = VDLocalDataManager.getBoolean(VDAudioManager.ENABLE_MUSIC, false);\r\n        let isMuteSfx = VDLocalDataManager.getBoolean(VDAudioManager.ENABLE_SFX, false);\r\n\r\n        VDAudioManager.instance.isMutingMusic = isMuteMusic;\r\n        VDAudioManager.instance.isMutingEffect = isMuteSfx;\r\n    }\r\n\r\n    private _loadAsset(index: number, totalPercent: number) {\r\n        if (index >= this._items.length) {\r\n            this.loadingProgress.progress = 1.0;\r\n            this._finishedLoading();\r\n            return;\r\n        }\r\n        let path = this._items[index];\r\n        log(\"_loadAsset  \" + path);\r\n        if (this._isDirectory(path)) {\r\n            VDScreenManager.instance.assetBundle.loadDir(path,\r\n                (finished, total) => {\r\n                    // log(`items #${index}:  ${finished} / ${total} `);\r\n                    let progress = index * totalPercent + finished / total * totalPercent;\r\n                    if (progress > this.loadingProgress.progress) {\r\n                        this.loadingProgress.progress = progress;\r\n                    }\r\n                },\r\n                (err, data) => {\r\n                    if (sys.isNative && (path.endsWith('/bgm/') || path.endsWith('/sfx/'))) {\r\n                        // log(`AudioClip loaded:${JSON.stringify(this._audios)}`);\r\n                        let assets: Asset[] = data;\r\n                        for (let as of assets) {\r\n                            if (as instanceof AudioClip) {\r\n                                this._audios[`${path}${as.name}`] = `${as._nativeAsset.url}`;\r\n                            }\r\n                        }\r\n\r\n                        this._initAudio();\r\n                    }\r\n\r\n                    if (!err) {\r\n                        this.scheduleOnce(() => {\r\n                            this._loadAsset(index + 1, totalPercent);\r\n                        }, 0);\r\n                    } else {\r\n                        log(\"load error  \" + err + \"    \" + path);\r\n                        if (sys.isBrowser) {\r\n                            this.showPopupMessage(\"Đã có lỗi tải tài nguyên, vui lòng thử lại\");\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n        else {\r\n            VDScreenManager.instance.assetBundle.load(path,\r\n                (finished, total) => {\r\n                    // log(`${finished} / ${total} `);\r\n                    this.loadingProgress.progress = index * totalPercent + finished / total * totalPercent;\r\n                },\r\n                (err, data) => {\r\n                    if (!err) {\r\n                        this.scheduleOnce(() => {\r\n                            this._loadAsset(index + 1, totalPercent);\r\n                        }, 0);\r\n                    }\r\n                    else {\r\n                        log(\"load error  \" + err + \"    \" + path);\r\n                        if (sys.isBrowser) {\r\n                            this.showPopupMessage(\"Đã có lỗi tải tài nguyên, vui lòng thử lại\");\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    private _finishedLoading() {\r\n        log(`LoadingScreen: _finishedLoading`);\r\n    }\r\n\r\n    onClickBtn2MainGame() {\r\n        log(`onClickBtn2MainGame`);\r\n\r\n        let play_screen = VDScreenManager.instance.assetBundle.get('res/prefabs/screen/play_screen', Prefab)!;\r\n        VDScreenManager.instance.replaceScreenAtIndex(play_screen, 0, (screen: VDBaseScreen) => {\r\n            dm_Director.instance.playScreen = screen as dm_PlayScreen;\r\n        });\r\n\r\n    }\r\n\r\n    private showPopupMessage(message: string) {\r\n        VDScreenManager.instance.showPopupFromPrefabName(\"res/prefabs/popup/popup_notify\", (popup: VDBasePopup) => {\r\n            // let popupDisplay = popup as DomiPopupNotify;\r\n            // popupDisplay.setupPopup(message, [\r\n            //     () => {\r\n            //         VDScreenManager.instance.hidePopup(true);\r\n            //         let percent = 1.0 / (this._items.length + 1);\r\n            //         this._loadAsset(0, percent);\r\n            //     },\r\n            //     () => {\r\n            //         VDScreenManager.instance.hidePopup(true);\r\n            //     }\r\n            // ]);\r\n        }, true, true, false);\r\n    }\r\n\r\n    private _setVersion(version: string) {\r\n        this.lbVersion && (this.lbVersion.string = 'v' + version);\r\n    }\r\n\r\n    private _isDirectory(path: string | null): boolean {\r\n        return path != null && typeof path == 'string' && path.length > 0 && path[path.length - 1] == '/';\r\n    }\r\n}\r\n\r\n\r\n"]}