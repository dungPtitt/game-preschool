{"version":3,"sources":["file:///C:/Users/Admin/Downloads/Telegram%20Desktop/FrameworkCocos/FrameworkCocos/assets/vd-framework/async-task/VDAsyncTaskMgr.ts"],"names":["VDAsyncTaskMgr","cc","Component","instance","_instance","constructor","_pool","_isRunning","_lastestTimeStamp","schedule","update","macro","REPEAT_FOREVER","game","on","Game","EVENT_HIDE","_onHideGame","EVENT_SHOW","_onShowGame","stop","cleanUp","unscheduleAllCallbacks","off","delta","performance","now","dt","pool","concat","task","isDone","index","indexOf","splice","removeTaskByKey","key","i","length","getKey","getTaskByKey","executeTask","taskContainer","push"],"mappings":"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","sourcesContent":["\nimport * as cc from 'cc';\nimport VDTaskContainer from './VDTaskContainer';\n\nexport default class VDAsyncTaskMgr extends cc.Component {\n\n    private _pool: VDTaskContainer[] = [];\n    private _isRunning = true;\n    private _lastestTimeStamp: number = 0;\n\n    private static _instance: VDAsyncTaskMgr = null;\n    public static get instance(): VDAsyncTaskMgr {\n        if (VDAsyncTaskMgr._instance == null) {\n            VDAsyncTaskMgr._instance = new VDAsyncTaskMgr();\n        }\n        return VDAsyncTaskMgr._instance;\n    }\n\n    constructor() {\n        super();\n        this.schedule(this.update, 0, cc.macro.REPEAT_FOREVER, 0);\n        cc.game.on(cc.Game.EVENT_HIDE, this._onHideGame, this);\n        cc.game.on(cc.Game.EVENT_SHOW, this._onShowGame, this);\n    }\n\n    stop() {\n        this.cleanUp();\n        this.unscheduleAllCallbacks();\n        cc.game.off(cc.Game.EVENT_HIDE, this._onHideGame, this);\n        cc.game.off(cc.Game.EVENT_SHOW, this._onShowGame, this);\n        VDAsyncTaskMgr._instance = null;\n        // return super.destroy();\n    }\n\n    private _onShowGame() {\n        // cc.log(`_onShowGame`);\n        this._isRunning = true;\n        let delta = performance.now() - this._lastestTimeStamp;\n        this.update(delta);\n        this._lastestTimeStamp = 0;\n\n    }\n\n    private _onHideGame() {\n        // cc.log(`_onHideGame`);\n        this._isRunning = false;\n        this._lastestTimeStamp = performance.now();\n    }\n\n    /**\n     * update all task inside\n     * @param dt\n     */\n    update(dt: number) {\n        if (!this._isRunning) return;\n        // cc.log(`VDAsyncTaskMgr: update ${this._pool.length} - ${dt}`);\n\n        let pool = [].concat(this._pool);\n        for (let task of pool) {\n            if (task.isDone()) {\n                task.cleanUp();\n                let index = this._pool.indexOf(task);\n                (index >= 0) && this._pool.splice(index, 1);\n            }\n            else {\n                task.update(dt);\n            }\n        }\n    }\n\n    removeTaskByKey(key: string) {\n        for (let i = 0; i < this._pool.length; ++i) {\n            if (this._pool[i].getKey && this._pool[i].getKey() === key) {\n                this._pool[i].cleanUp();\n                this._pool.splice(i, 1);\n                return true;\n            }\n            else {\n            }\n        }\n\n        return false;\n    }\n\n    getTaskByKey(key: string) {\n        for (let i = 0; i < this._pool.length; ++i) {\n            if (this._pool[i].getKey && this._pool[i].getKey() === key) {\n                return this._pool[i];\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * schedule async task manager if need,\n     * and push new task to pool\n     * @param taskContainer\n     */\n    executeTask(taskContainer: VDTaskContainer) {\n        // this.schedule(); // start schedule if need \n        this._pool.push(taskContainer);\n    }\n\n    /**\n     * clean up all\n     */\n    cleanUp() {\n        for (let i = 0; i < this._pool.length; ++i) {\n            if (this._pool[i]) {\n                this._pool[i].cleanUp();\n            }\n        }\n        this._pool.splice(0, this._pool.length);\n    }\n};\n\n\n"]}