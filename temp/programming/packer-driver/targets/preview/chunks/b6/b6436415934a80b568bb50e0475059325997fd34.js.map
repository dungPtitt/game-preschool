{"version":3,"sources":["file:///C:/Users/Admin/Downloads/Telegram%20Desktop/FrameworkCocos/FrameworkCocos/assets/vd-framework/utils/VDNodeScaleByBone.ts"],"names":["_decorator","Component","sp","ccclass","property","VDNodeScaleByBone","_skeleton","start","node","getComponent","Skeleton","update","sockets","forEach","socket","path","target","boneName","_getBoneNameByPath","scale","_getAbsoluteScaleByPath","setScale","arr","split","length","arrName","bone","findBone","scaleX"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,E,OAAAA,E;;;;;;;;;OAC1B;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;mCAGjBK,iB,WADZF,OAAO,CAAC,mBAAD,C,gBAAR,MACaE,iBADb,SACuCJ,SADvC,CACiD;AAAA;AAAA;AAAA,eAErCK,SAFqC,GAEZ,IAFY;AAAA;;AAI7CC,QAAAA,KAAK,GAAG;AACJ,eAAKD,SAAL,GAAiB,KAAKE,IAAL,CAAUC,YAAV,CAAuBP,EAAE,CAACQ,QAA1B,CAAjB;AACH;;AAEDC,QAAAA,MAAM,GAAG;AACL,cAAI,CAAC,KAAKL,SAAV,EAAqB;;AAErB,eAAKA,SAAL,CAAeM,OAAf,CAAuBC,OAAvB,CAA+BC,MAAM,IAAI;AACrC,gBAAIC,IAAI,GAAGD,MAAM,CAACC,IAAlB;AACA,gBAAIC,MAAM,GAAGF,MAAM,CAACE,MAApB;;AAEA,gBAAIC,QAAQ,GAAG,KAAKC,kBAAL,CAAwBH,IAAxB,CAAf;;AACA,gBAAII,KAAK,GAAG,KAAKC,uBAAL,CAA6BL,IAA7B,CAAZ;;AACA,gBAAIE,QAAQ,IAAIA,QAAQ,IAAI,EAA5B,EAAgC;AAC5BD,cAAAA,MAAM,CAACK,QAAP,CAAgBF,KAAhB,EAAuBA,KAAvB;AACH;AACJ,WATD;AAUH;;AAEDD,QAAAA,kBAAkB,CAACH,IAAD,EAAe;AAC7B,cAAIE,QAAQ,GAAG,EAAf;AACA,cAAIK,GAAG,GAAGP,IAAI,CAACQ,KAAL,CAAW,GAAX,CAAV;;AACA,cAAID,GAAG,CAACE,MAAJ,GAAa,CAAjB,EAAoB;AAChBP,YAAAA,QAAQ,GAAGK,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAa,CAAd,CAAd;AACH;;AACD,iBAAOP,QAAP;AACH;;AAEDG,QAAAA,uBAAuB,CAACL,IAAD,EAAe;AAClC,cAAII,KAAK,GAAG,CAAZ;AACA,cAAIM,OAAO,GAAGV,IAAI,CAACQ,KAAL,CAAW,GAAX,CAAd;AACAE,UAAAA,OAAO,CAACZ,OAAR,CAAgBI,QAAQ,IAAI;AACxB,gBAAIS,IAAI,GAAG,KAAKpB,SAAL,CAAeqB,QAAf,CAAwBV,QAAxB,CAAX;;AACAE,YAAAA,KAAK,IAAIO,IAAI,CAACE,MAAd;AACH,WAHD;AAIA,iBAAOT,KAAP;AACH;;AAxC4C,O","sourcesContent":["import { _decorator, Component, sp, log } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('VDNodeScaleByBone')\nexport class VDNodeScaleByBone extends Component {\n\n    private _skeleton: sp.Skeleton = null!;\n\n    start() {\n        this._skeleton = this.node.getComponent(sp.Skeleton);\n    }\n\n    update() {\n        if (!this._skeleton) return;\n\n        this._skeleton.sockets.forEach(socket => {\n            let path = socket.path;\n            let target = socket.target;\n\n            let boneName = this._getBoneNameByPath(path);\n            let scale = this._getAbsoluteScaleByPath(path);\n            if (boneName && boneName != '') {\n                target.setScale(scale, scale);\n            }\n        });\n    }\n\n    _getBoneNameByPath(path: string) {\n        let boneName = '';\n        let arr = path.split('/');\n        if (arr.length > 0) {\n            boneName = arr[arr.length - 1];\n        }\n        return boneName;\n    }\n\n    _getAbsoluteScaleByPath(path: string) {\n        let scale = 1;\n        let arrName = path.split('/');\n        arrName.forEach(boneName => {\n            let bone = this._skeleton.findBone(boneName);\n            scale *= bone.scaleX;\n        });\n        return scale;\n    }\n}"]}