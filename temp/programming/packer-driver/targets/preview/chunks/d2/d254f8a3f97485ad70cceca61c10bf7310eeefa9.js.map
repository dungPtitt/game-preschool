{"version":3,"sources":["file:///D:/game/FrameworkCocos/assets/vd-games/preschool-exam/script/screens/ex_LoadingScreen2.ts"],"names":["_decorator","Component","Node","ProgressBar","Label","sys","log","assetManager","AudioClip","Prefab","VDAudioManager","VDLocalDataManager","VDScreenManager","ex_Config","ccclass","property","ex_LoadingScreen2","_audios","_items","onLoad","soundDirs","imageDirs","prefabDirs","prefabs","isNative","concat","_setVersion","versionGame","start","loadingProgress","progress","startBtn","active","percent","length","isBrowser","_loadAudioWeb","instance","assetBundle","load","err","data","_loadAsset","alert","forEach","soundsPath","sounds","getDirWithPath","sound","path","nativeUrl","utils","getUrlWithUuid","uuid","nativeExt","_initAudio","init","isMuteMusic","getBoolean","ENABLE_MUSIC","isMuteSfx","ENABLE_SFX","isMutingMusic","isMutingEffect","index","totalPercent","_finishedLoading","_isDirectory","loadDir","finished","total","endsWith","assets","as","name","_nativeAsset","url","scheduleOnce","showPopupMessage","on","EventType","TOUCH_END","onClickBtn2MainGame","bind","play_screen","get","replaceScreenAtIndex","screen","message","showPopupFromPrefabName","popup","version","lbVersion","string"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, ProgressBar, Label, sys, log, assetManager, AudioClip, Asset, Prefab } from 'cc';\r\nimport { VDAudioManager } from '../../../../vd-framework/audio/VDAudioManager';\r\nimport VDLocalDataManager from '../../../../vd-framework/common/VDLocalDataManager';\r\nimport VDBasePopup from '../../../../vd-framework/ui/VDBasePopup';\r\nimport VDBaseScreen from '../../../../vd-framework/ui/VDBaseScreen';\r\nimport VDScreenManager from '../../../../vd-framework/ui/VDScreenManager';\r\nimport { ex_Config } from '../common/ex_Config';\r\nimport { ex_Director } from '../common/ex_Director';\r\nimport { ex_MainScreen } from './ex_MainScreen';\r\nimport { ex_MatchScreen } from './ex_MatchScreen';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('ex_LoadingScreen2')\r\nexport class ex_LoadingScreen2 extends Component {\r\n    @property(ProgressBar)\r\n    loadingProgress: ProgressBar = null!;\r\n\r\n    @property(Label)\r\n    lbVersion: Label = null!;\r\n    @property(Node)\r\n    startBtn: Node = null!;\r\n\r\n    private _audios: { [key: string]: string } = {};\r\n    private _items: string[] = [];\r\n\r\n    onLoad() {\r\n        let soundDirs = [\r\n            'res/sounds/bgm/',\r\n            'res/sounds/sfx/',\r\n        ];\r\n\r\n        let imageDirs = [\r\n            'res/fonts/',\r\n            'res/images/bgr/',\r\n        ];\r\n\r\n        let prefabDirs = [\r\n            'res/anims/prefabs/',\r\n            'res/prefabs/popup/',\r\n        ];\r\n\r\n        let prefabs = [\r\n            'res/prefabs/screen/main_screen',\r\n            'res/prefabs/screen/match_screen',\r\n            'res/prefabs/screen/match/level1',\r\n            'res/prefabs/screen/match/level2',\r\n            'res/prefabs/screen/match/level3',\r\n\r\n            'res/prefabs/screen/comparison_screen',\r\n            'res/prefabs/screen/comparison/level1',\r\n            'res/prefabs/screen/comparison/level2',\r\n\r\n            'res/prefabs/screen/complete_picture_screen',\r\n        ];\r\n\r\n        if (sys.isNative) this._items = this._items.concat(soundDirs);\r\n\r\n        this._items = this._items\r\n            // .concat(soundDirs)\r\n            .concat(imageDirs)\r\n            .concat(prefabDirs)\r\n            .concat(prefabs);\r\n\r\n        this._setVersion(ex_Config.versionGame);\r\n    }\r\n\r\n    start() {\r\n\r\n        this.loadingProgress.progress = 0;\r\n        this.startBtn.active = false;\r\n        let percent = 1.0 / (this._items.length + 1);\r\n        sys.isBrowser && this._loadAudioWeb();\r\n        VDScreenManager.instance.assetBundle.load('res/prefabs/popup/popup_notify',\r\n            (err, data) => {\r\n                if (!err) {\r\n                    this._loadAsset(0, percent);\r\n                }\r\n                else {\r\n                    log(\"load error  \" + err + \" _loadAsset\");\r\n                    if (sys.isBrowser) {\r\n                        alert(\"Không có kết nối, vui lòng thử lại\");\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    private _loadAudioWeb() {\r\n        let soundDirs = [\r\n            'res/sounds/bgm/',\r\n            'res/sounds/sfx/',\r\n        ];\r\n        soundDirs.forEach(soundsPath => {\r\n            const sounds = VDScreenManager.instance.assetBundle.getDirWithPath(soundsPath, AudioClip);\r\n            sounds.forEach(sound => {\r\n                if (this._audios[`${sound.path}`]) return;\r\n                const nativeUrl = assetManager.utils.getUrlWithUuid(sound.uuid, { isNative: true, nativeExt: '.mp3' });\r\n                // log('sound', sound.path, sound.uuid, nativeUrl);\r\n                // log('sound', assetManager.utils.getUrlWithUuid(sound.uuid, { isNative: false }))\r\n                this._audios[`${sound.path}`] = nativeUrl;\r\n            })\r\n        });\r\n\r\n        this._initAudio();\r\n    }\r\n\r\n    private _initAudio() {\r\n        VDAudioManager.instance.init(this._audios);\r\n\r\n        let isMuteMusic = VDLocalDataManager.getBoolean(VDAudioManager.ENABLE_MUSIC, false);\r\n        let isMuteSfx = VDLocalDataManager.getBoolean(VDAudioManager.ENABLE_SFX, false);\r\n\r\n        VDAudioManager.instance.isMutingMusic = isMuteMusic;\r\n        VDAudioManager.instance.isMutingEffect = isMuteSfx;\r\n    }\r\n\r\n    private _loadAsset(index: number, totalPercent: number) {\r\n        if (index >= this._items.length) {\r\n            this.loadingProgress.progress = 1.0;\r\n            this._finishedLoading();\r\n            return;\r\n        }\r\n        let path = this._items[index];\r\n        log(\"_loadAsset  \" + path);\r\n        if (this._isDirectory(path)) {\r\n            VDScreenManager.instance.assetBundle.loadDir(path,\r\n                (finished, total) => {\r\n                    // log(`items #${index}:  ${finished} / ${total} `);\r\n                    let progress = index * totalPercent + finished / total * totalPercent;\r\n                    if (progress > this.loadingProgress.progress) {\r\n                        this.loadingProgress.progress = progress;\r\n                    }\r\n                },\r\n                (err, data) => {\r\n                    if (sys.isNative && (path.endsWith('/bgm/') || path.endsWith('/sfx/'))) {\r\n                        // log(`AudioClip loaded:${JSON.stringify(this._audios)}`);\r\n                        let assets: Asset[] = data;\r\n                        for (let as of assets) {\r\n                            if (as instanceof AudioClip) {\r\n                                this._audios[`${path}${as.name}`] = `${as._nativeAsset.url}`;\r\n                            }\r\n                        }\r\n\r\n                        this._initAudio();\r\n                    }\r\n\r\n                    if (!err) {\r\n                        this.scheduleOnce(() => {\r\n                            this._loadAsset(index + 1, totalPercent);\r\n                        }, 0);\r\n                    } else {\r\n                        log(\"load error  \" + err + \"    \" + path);\r\n                        if (sys.isBrowser) {\r\n                            this.showPopupMessage(\"Đã có lỗi tải tài nguyên, vui lòng thử lại\");\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n        else {\r\n            VDScreenManager.instance.assetBundle.load(path,\r\n                (finished, total) => {\r\n                    // log(`${finished} / ${total} `);\r\n                    this.loadingProgress.progress = index * totalPercent + finished / total * totalPercent;\r\n                },\r\n                (err, data) => {\r\n                    if (!err) {\r\n                        this.scheduleOnce(() => {\r\n                            this._loadAsset(index + 1, totalPercent);\r\n                        }, 0);\r\n                    }\r\n                    else {\r\n                        log(\"load error  \" + err + \"    \" + path);\r\n                        if (sys.isBrowser) {\r\n                            this.showPopupMessage(\"Đã có lỗi tải tài nguyên, vui lòng thử lại\");\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    private _finishedLoading() {\r\n        log(`LoadingScreen: _finishedLoading`);\r\n        this.startBtn.active = true;\r\n        this.startBtn.on(Node.EventType.TOUCH_END, this.onClickBtn2MainGame.bind(this));\r\n    }\r\n\r\n    onClickBtn2MainGame() {\r\n        log(`onClickBtn2MainGame`);\r\n        \r\n        let play_screen = VDScreenManager.instance.assetBundle.get('res/prefabs/screen/main_screen', Prefab)!;\r\n        VDScreenManager.instance.replaceScreenAtIndex(play_screen, 0, (screen: VDBaseScreen) => {\r\n            // ex_Director.instance.playScreen = screen as ex_MainScreen;\r\n        });\r\n\r\n    }\r\n\r\n    private showPopupMessage(message: string) {\r\n        VDScreenManager.instance.showPopupFromPrefabName(\"res/prefabs/popup/popup_notify\", (popup: VDBasePopup) => {\r\n            // let popupDisplay = popup as DomiPopupNotify;\r\n            // popupDisplay.setupPopup(message, [\r\n            //     () => {\r\n            //         VDScreenManager.instance.hidePopup(true);\r\n            //         let percent = 1.0 / (this._items.length + 1);\r\n            //         this._loadAsset(0, percent);\r\n            //     },\r\n            //     () => {\r\n            //         VDScreenManager.instance.hidePopup(true);\r\n            //     }\r\n            // ]);\r\n        }, true, true, false);\r\n    }\r\n\r\n    private _setVersion(version: string) {\r\n        this.lbVersion && (this.lbVersion.string = 'v' + version);\r\n    }\r\n\r\n    private _isDirectory(path: string | null): boolean {\r\n        return path != null && typeof path == 'string' && path.length > 0 && path[path.length - 1] == '/';\r\n    }\r\n}\r\n\r\n\r\n"]}