{"version":3,"sources":["file:///D:/game/FrameworkCocos/assets/vd-games/preschool-exam/script/screens/complete_picture/level1_picture.ts"],"names":["_decorator","Component","Node","Prefab","log","Sprite","VDScreenManager","ccclass","property","level1_picture","type","sum","canPick","onClickBtnNext","event","data","level2_screen","instance","assetBundle","get","String","pushScreen","screen","onClickBtnBack","popScreen","onClickInstruction","start","startPlay","i","itemQuestions","length","on","check_startPositon","bind","p","getWorldPosition","checkPosition","questionP","j","itemAnswers","answerP","dx","Math","abs","x","dy","y","active","spriteA","getComponent","spriteQ","color","handleCorrect","nextBtn","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, log, Sprite } from 'cc';\r\nimport VDBaseScreen from '../../../../../vd-framework/ui/VDBaseScreen';\r\nimport VDScreenManager from '../../../../../vd-framework/ui/VDScreenManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('level1_picture')\r\nexport class level1_picture extends Component {\r\n\r\n    @property({type: Node})\r\n    itemQuestions: Node[] = [];\r\n    @property({type: Node})\r\n    itemAnswers: Node[] = [];\r\n    @property({type: Node})\r\n    nextBtn: Node = null;\r\n    private sum = 0;\r\n\r\n    private canPick = true;\r\n\r\n    onClickBtnNext(event: TouchEvent, data: any) {\r\n        log(\"check number: \", data)\r\n        let level2_screen = VDScreenManager.instance.assetBundle.get('res/prefabs/screen/complete_picture/level'+String(data), Prefab)!;\r\n        VDScreenManager.instance.pushScreen(level2_screen, (screen: VDBaseScreen) => { }, true);\r\n    }\r\n    onClickBtnBack() {\r\n        VDScreenManager.instance.popScreen(true);\r\n    }\r\n    onClickInstruction() {\r\n        log(\"start instruction\")\r\n\r\n    }\r\n    start() {\r\n        this.startPlay();\r\n    }\r\n\r\n    startPlay(){\r\n        if(this.canPick) {\r\n            for(let i=0; i<this.itemQuestions.length; i++){\r\n                this.itemQuestions[i].on(\"i-am-start\", this.check_startPositon.bind(this));\r\n                let p = this.itemQuestions[i].getWorldPosition();\r\n                this.itemQuestions[i].on(\"i-am-moving\", this.checkPosition.bind(this, i));\r\n            }\r\n        }\r\n    }\r\n    check_startPositon(){\r\n        log(\"check start\");\r\n    }\r\n\r\n    checkPosition(i: number){\r\n        let questionP = this.itemQuestions[i].getWorldPosition();\r\n        // log(\"check i: \",i);\r\n        \r\n        for(let j = 0; j<this.itemAnswers.length; j++){\r\n            let answerP = this.itemAnswers[j].getWorldPosition();\r\n            let dx = Math.abs(answerP.x-questionP.x);\r\n            let dy = Math.abs(answerP.y-questionP.y);\r\n            if(dx<40 && dy<40){\r\n                if(i==j){\r\n                    this.itemQuestions[i].active = false;\r\n                    let spriteA = this.itemAnswers[i].getComponent(Sprite);\r\n                    let spriteQ = this.itemQuestions[i].getComponent(Sprite);\r\n                    spriteA.color = spriteQ.color;\r\n                    this.sum++;\r\n                    if(this.sum == 3) {\r\n                        this.handleCorrect();\r\n                    }\r\n                }else{\r\n                    log(\"wrong!\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleCorrect(){\r\n        log(\"correct!\");\r\n        this.nextBtn.active = true;\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        \r\n    }\r\n}\r\n\r\n\r\n"]}