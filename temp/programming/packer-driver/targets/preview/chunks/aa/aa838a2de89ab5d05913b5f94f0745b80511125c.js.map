{"version":3,"sources":["file:///C:/Users/Admin/Downloads/Telegram%20Desktop/FrameworkCocos/FrameworkCocos/assets/vd-framework/common/VDPortraitCanvasResize.ts"],"names":["_decorator","Component","sys","view","DEV","VDEventListener","VDEventListenerName","ccclass","property","VDPotraitCanvasResize","_thisOnResized","onLoad","isBrowser","onScreenResized","bind","window","addEventListener","updateCanvasAttributes","isMobile","on","updateCanvasSize","scrollTo","windowWidth","innerWidth","windowHeight","innerHeight","windowRatio","designRatio","getDesignResolutionSize","width","height","cvShadow","document","getElementById","cWidth","Math","floor","padding","setAttribute","cHeight","dispatchEvent","RESIZE_WINDOW_EVENT","onDestroy","removeEventListener","off"],"mappings":"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","sourcesContent":["import { _decorator, Component, sys, view, log } from 'cc';\r\nimport { DEV } from 'cc/env';\r\nimport { VDEventListener, VDEventListenerName } from './VDEventListener';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('VDPotraitCanvasResize')\r\nexport class VDPotraitCanvasResize extends Component {\r\n    _thisOnResized: any;\r\n\r\n    onLoad() {\r\n        if (!DEV && sys.isBrowser) {\r\n            this._thisOnResized = this.onScreenResized.bind(this);\r\n            window.addEventListener('resize', this._thisOnResized);\r\n            this.updateCanvasAttributes();\r\n        }\r\n        if (!DEV && sys.isBrowser && sys.isMobile) {\r\n            // console.warn('iOS safari browser ');\r\n            view.on('canvas-resize', this.updateCanvasSize);\r\n            this.updateCanvasSize();\r\n        }\r\n    }\r\n\r\n    updateCanvasSize() {\r\n        // console.warn('updateCanvasSize');\r\n        // console.warn('iOS safari browser ');\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    updateCanvasAttributes() {\r\n        // const viewSize = view.getFrameSize();\r\n        // log('===================================');\r\n        // log(`window size original: ${window.innerWidth} - ${window.innerHeight}`);\r\n        // log(`view.getDevicePixelRatio: ${view.getDevicePixelRatio()} `);\r\n        // log(`window.getDevicePixelRatio: ${window.devicePixelRatio} `);\r\n\r\n        // let ratio = 1; //window.devicePixelRatio;\r\n        let windowWidth = window.innerWidth;\r\n        let windowHeight = window.innerHeight;\r\n        // log(`window size * ratio: ${windowWidth} - ${windowHeight}`);\r\n\r\n        // log(`view size: ${viewSize.width} - ${viewSize.height}`);\r\n        // log(`canvas size: ${view.getCanvasSize().width} - ${view.getCanvasSize().height}`);\r\n        // log(`visible size: ${view.getVisibleSize().width} - ${view.getVisibleSize().height}`);\r\n\r\n        // log(`design size: ${view.getDesignResolutionSize().width} - ${view.getDesignResolutionSize().height}`);\r\n        // log(`sys.windowPixelResolution : ${sys.windowPixelResolution.width} - ${sys.windowPixelResolution.height}`);\r\n\r\n        let windowRatio = windowWidth * 1.0 / windowHeight;\r\n        let designRatio = view.getDesignResolutionSize().width * 1.0 / view.getDesignResolutionSize().height;\r\n\r\n        let cvShadow = document.getElementById('canvas-shadow');\r\n        if (windowRatio > designRatio) {\r\n            if (view.getDesignResolutionSize().width == 1280) {\r\n                designRatio = 1600.0 / 720;\r\n            }\r\n            let cWidth = Math.floor(designRatio * windowHeight);\r\n            let padding = Math.floor((windowWidth - cWidth) / 2);\r\n            // game.canvas?.setAttribute('width', `${cWidth}px`);\r\n            // game.canvas?.setAttribute('height', `${windowHeight}px`);\r\n            // game.canvas?.setAttribute('style', `width: ${cWidth}px; height: ${windowHeight}px;`);\r\n            // const containerStyle = game.container?.style;\r\n            // if (containerStyle) {\r\n            //     containerStyle.paddingLeft = `${padding}px`;\r\n            //     containerStyle.paddingRight = `${padding}px`;\r\n            //     containerStyle.paddingTop = `0px`;\r\n            //     containerStyle.paddingBottom = `0px`;\r\n            // }\r\n            // document.body.style.width = `${windowWidth}px`;\r\n            // document.body.style.height = `${windowHeight}px`;\r\n\r\n            // view.emit(\"canvas-resize\");\r\n            // view._resizeCallback && view._resizeCallback();\r\n\r\n            if (cvShadow) {\r\n                cvShadow.setAttribute('style', `visibility: visible;height: ${windowHeight - 1}px;width: ${cWidth}px;left: ${padding}px;top: 0px;transform: rotate(0deg);`)\r\n            }\r\n            // game.canvas?.style && (game.canvas.style.visibility = 'hidden');\r\n            // game.canvas?.style && (game.canvas.style.visibility = 'visible');\r\n            // director.reset();\r\n            // game.container?.setAttribute('style', `transform: rotate(0deg); width: ${cWidth}px; height: ${windowHeight}px; margin: 0px; padding: 0px ${padding}px;`);\r\n            // view.setDesignResolutionSize(\r\n            //     view.getDesignResolutionSize().width,\r\n            //     view.getDesignResolutionSize().height,\r\n            //     ResolutionPolicy.SHOW_ALL\r\n            // );\r\n        }\r\n        else {\r\n            if (view.getDesignResolutionSize().width == 720) {\r\n                designRatio = 720 / 1560.0;\r\n            }\r\n            let cHeight = Math.floor(windowWidth / designRatio);\r\n            // game.canvas?.setAttribute('width', `${windowWidth}px`);\r\n            // game.canvas?.setAttribute('height', `${cHeight}px`);\r\n            // game.canvas?.setAttribute('style', `width: ${windowWidth}px; height: ${cHeight}px;`);\r\n            let padding = Math.floor((windowHeight - cHeight) / 2);\r\n            if (cvShadow) {\r\n                cvShadow.setAttribute('style', `visibility: visible;height: ${cHeight}px;width: ${windowWidth - 1}px;left: 0px;top: ${padding}px;transform: rotate(0deg);`)\r\n            }\r\n            // game.container?.setAttribute('style', `transform: rotate(0deg); width: ${windowWidth}px; height: ${cHeight}px; margin: 0px; padding: ${padding}px 0px;`);\r\n\r\n            // view.setCanvasSize(windowWidth, cHeight);\r\n            // view.setDesignResolutionSize(\r\n            //     view.getDesignResolutionSize().width,\r\n            //     view.getDesignResolutionSize().height,\r\n            //     ResolutionPolicy.SHOW_ALL\r\n            // );\r\n        }\r\n    }\r\n\r\n    onScreenResized() {\r\n        this.updateCanvasAttributes();\r\n        VDEventListener.dispatchEvent(VDEventListenerName.RESIZE_WINDOW_EVENT, this);\r\n    }\r\n\r\n    onDestroy() {\r\n        if (!DEV && sys.isBrowser) {\r\n            window.removeEventListener('resize', this._thisOnResized);\r\n        }\r\n        if (!DEV && sys.isBrowser && sys.isMobile) {\r\n            view.off('canvas-resize', this.updateCanvasSize);\r\n        }\r\n    }\r\n}\r\n\r\n"]}